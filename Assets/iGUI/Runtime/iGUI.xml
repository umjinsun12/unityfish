<?xml version="1.0"?>
<doc>
    <assembly>
        <name>/Users/ersankavafoglu/Documents/Projects/SDKs/iGUI/Sources/iGUI/iGUI/bin/Release/iGUI</name>
    </assembly>
    <members>
        <member name="T:iGUI.iGUIAction">
            <summary>
            The class which all actions and animations derive from.
            </summary>
        </member>
        <member name="M:iGUI.iGUIAction.init(iGUI.iGUIElement)">
            <summary>
            Can be overriden if any initialization process is needed for action.
            </summary>
            <param name="caller">
            A <see cref="T:iGUI.iGUIElement" /></param>
        </member>
        <member name="M:iGUI.iGUIAction.act(iGUI.iGUIElement)">
            <summary>
            The main method to override. Called when the action is triggered.
            </summary>
            <param name="caller">
            A <see cref="T:iGUI.iGUIElement" /></param>
        </member>
        <member name="T:iGUI.iGUIButton">
            <summary>
            The class which is used to create buttons
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.onClickDown">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onClickDown) after modifying onClickDown array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.onClickUp">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onClickUp) after modifying onClickUp array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.onClick">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onClick) after modifying onClick array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.onDoubleClick">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onDoubleClick) after modifying onDoubleClick array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.onLongPress">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onLongPress) after modifying onDoubleClick array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.fireClickEventOnDoubleClick">
            <summary>
            Is used to determine whether click event will be triggered along with double-click event when a double click is performed.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.longPressThreshold">
            <summary>
            Long press event will be fired for each press, if button is pressed for more than the indicated seconds.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.isRepeat">
            <summary>
            Is used to determine whether click event will be triggered repeatedly during the button is down. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.type">
            <summary>
            Type property only effects the visual appearance of the button. As of version 1.06 there are fourteen types of button in iGUI. To change the type of a button during runtime please use setType() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.style">
            <summary>
            Is used to fine tune the visual appearance of the button. This field's value is copied from the GUI skin stored in the root when a button is created or the type changed. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIButton.clickDownCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIButton.clickUpCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIButton.clickCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIButton.doubleClickCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIButton.longPressCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="P:iGUI.iGUIButton.isPressed">
            <summary>
            Is used to learn whether onClick event is fired or not.
            </summary>
        </member>
        <member name="M:iGUI.iGUIButton.setDynamicFontSize(System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIButton.getEventNames-->
        <member name="M:iGUI.iGUIButton.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIButton.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIButton.setCustomStyle(System.String)">
            <summary>
            Is used to assign a custom style at runtime.
            </summary>
            <param name="name">
            Style Name.
            </param>
        </member>
        <member name="M:iGUI.iGUIButton.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIButton.setType(iGUI.iGUIButtonType)">
            <summary>
            Type property only effects the visual appearance of the button. This method is used to change the type of a button during runtime.
            </summary>
            <param name="type">
            A <see cref="T:iGUI.iGUIButtonType" /></param>
        </member>
        <member name="T:iGUI.iGUICheckboxGroup">
            <summary>
            The class which is used to create checkbox groups
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.isSingleSelect">
            <summary>
            Is used to determine whether multiple selections are allowed or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.reverseOrder">
            <summary>
            Is used to reverse the order of checkbox group options.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.optionList">
            <summary>
            Don't modify this field directly. Use addOption(), insertOption() and removeOption() methods instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.values">
            <summary>
            Is used to get and set the values of the checkboxes.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.itemsEnabled">
            <summary>
            Is used to enable/disable checkbox options. To apply changes, call refreshRect() after modifying itemsEnabled list.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.itemsPassive">
            <summary>
            Is used to activate/passivate checkbox options.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.layout">
            <summary>
            Is used to determine the layout of checkboxes. To change the line up of checkboxes during runtime please use setLayout() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.type">
            <summary>
            Type property only effects the visual appearance of the checkbox. As of version 1.06 there are three types of checkbox in iGUI. To change the type of checkboxes during runtime please use setType() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.optionDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.style">
            <summary>
            Is used to fine tune the visual appearance of checkboxes. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUICheckboxGroup.lastChangedIndex">
            <summary>
            Is used to get the last changed index of the checkbox group.
            </summary>
        </member>
        <member name="P:iGUI.iGUICheckboxGroup.selectedIndex">
            <summary>
            Is used to get the selected option's index. Useful when isSingleSelect checked. Returns -1 if none selected. Read-only. Use values field to change the values of the options.
            </summary>
        </member>
        <member name="P:iGUI.iGUICheckboxGroup.selectedIndexes">
            <summary>
            Is used to get the selected option indexes. Useful when isSingleSelect not-checked. Read-only. Use values field to change the values of the options.
            </summary>
        </member>
        <member name="P:iGUI.iGUICheckboxGroup.selectedOptions">
            <summary>
            Is used to get the selected options. Read-only. Use values field to change the values of the options.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUICheckboxGroup.getEventNames-->
        <member name="M:iGUI.iGUICheckboxGroup.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.setType(iGUI.iGUICheckboxType)">
            <summary>
            Type property only effects the visual appearance of the checkboxes. This method is used to change the type of a checkbox during runtime.
            </summary>
            <param name="type">
            A <see cref="T:iGUI.iGUICheckboxType" /></param>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.setLayout(iGUI.iGUICheckboxLayout)">
            <summary>
            Is used to modify the layout of checkboxes during runtime.
            </summary>
            <param name="layout">
            A <see cref="T:iGUI.iGUICheckboxLayout" /></param>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.addOption(System.String)">
            <summary>
            Is used to add new options to checkbox group during runtime
            </summary>
            <param name="option">
            A <see cref="T:System.String" /> containing the text of new option
            </param>
            <returns>
            A <see cref="T:System.Int32" /> holds the index of the newly added option
            </returns>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.addOption(UnityEngine.GUIContent)">
            <summary>
            Is used to add new options to checkbox group during runtime
            </summary>
            <param name="option">
            A <see cref="T:UnityEngine.GUIContent" /></param>
            <returns>
            A <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.addOption(System.String,System.Boolean)">
            <summary>
            Is used to add new options to checkbox group during runtime
            </summary>
            <param name="option">
            A <see cref="T:System.String" /></param>
            <param name="value">
            A <see cref="T:System.Boolean" /></param>
            <returns>
            A <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.addOption(UnityEngine.GUIContent,System.Boolean)">
            <summary>
            Is used to add new options to checkbox group during runtime
            </summary>
            <param name="option">
            A <see cref="T:UnityEngine.GUIContent" /></param>
            <param name="value">
            A <see cref="T:System.Boolean" /></param>
            <returns>
            A <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.removeOption(System.Int32)">
            <summary>
            Is used to remove options from checkbox at runtime. If no options at the given index was found, then returns null.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /> as the index of option to remove from checkbox.
            </param>
            <returns>
            A <see cref="T:UnityEngine.GUIContent" /> which holds the text of removed option.
            </returns>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.removeOption(System.String)">
            <summary>
            Is used to remove options from checkbox at runtime. If no options with the given text was found, then returns false.
            </summary>
            <param name="option">
            A <see cref="T:System.String" /> to search in the options text.
            </param>
            <returns>
            A <see cref="T:System.Boolean" /> returns true when the item is found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.removeAll">
            <summary>
            Is used to remove all options of the checkbox
            </summary>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.insertOption(System.Int32,System.String)">
            <summary>
            Is used to insert an option at a specified index during runtime.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /> to determine the index of the new item.
            </param>
            <param name="option">
            A <see cref="T:System.String" /> to determine the text of new option.
            </param>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.insertOption(System.Int32,UnityEngine.GUIContent)">
            <summary>
            Is used to insert an option at a specified index during runtime.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /> to determine the index of the new item.
            </param>
            <param name="option">
            A <see cref="T:UnityEngine.GUIContent" /> to determine the new option.
            </param>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.insertOption(System.Int32,System.String,System.Boolean)">
            <summary>
            Is used to insert an option at a specified index during runtime.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /></param>
            <param name="option">
            A <see cref="T:System.String" /></param>
            <param name="value">
            A <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.insertOption(System.Int32,UnityEngine.GUIContent,System.Boolean)">
            <summary>
            Is used to insert an option at a specified index during runtime.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /></param>
            <param name="option">
            A <see cref="T:UnityEngine.GUIContent" /></param>
            <param name="value">
            A <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:iGUI.iGUICheckboxGroup.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="optionFontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="T:iGUI.iGUIContainer">
            <summary>
            The class which is used to create Containers.
            </summary>
        </member>
        <member name="F:iGUI.iGUIContainer.layout">
            <summary>
            Is used determine the line-up of child elements. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIContainer.reverseOrder">
            <summary>
            Is used to reverse the layout order of items. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIContainer.ignoreDisabledElements">
            <summary>
            Is used to determine, whether disabled elements taken into account when calculating the layout of child elements.
            </summary>
        </member>
        <member name="F:iGUI.iGUIContainer.padding">
            <summary>
            Is used restrict the usable area of a container. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIContainer.itemsMargin">
            <summary>
            Is used determine the spacing between child elements. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="M:iGUI.iGUIContainer.addSmartObject(System.String)">
            <summary>
            Is used to create and add an instance of smart object with the given name.
            </summary>
            <param name="smartObjectName">
            A <see cref="T:System.String" /> as the name of smartobject file.
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIElement" /> which is the root of smart object and has the iGUISmartObject component.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1(System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1(System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1(UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1(System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement``1(System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String,System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String,System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String,System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElement(System.String,System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElementSilent``1">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addElementSilent(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.addSmartObjectSilent(System.String)">
            <summary>
            Is used to create and add an instance of smart object with the given name but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="smartObjectName">
            A <see cref="T:System.String" /> as the name of smartobject file.
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIElement" /> which is the root of smart object and has the iGUISmartObject component.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.removeElementSilent(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.removeElement(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIContainer.removeAll">
            <summary>
            Is used to remove all elements in this container at runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUIContainer.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIContainer.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIContainer.positionToChildOrder(UnityEngine.Vector2)">
            <summary>
            Calculates the child order for a position given in screen space.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Vector2" /> given in screen space.
            </param>
            <returns>
            A <see cref="T:System.Int32" /> as order.
            </returns>
        </member>
        <member name="T:iGUI.iGUIElement">
            <summary>
            Base class for all elements and containers. Inherits from MonoBehaviour.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.variableName">
            <summary>
            Is used to resolve event method names. Don't modify this field directly. Use setVariableName() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.enabled">
            <summary>
            Is used to enable or disable without triggering Enable/Disable event and action
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.passive">
            <summary>
            Is used to determine if element can be interacted or not
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.positionAndSize">
            <summary>
            Is used to determine the position and size of the element. Don't modify this field directly. Use setPositionAndSize() or setX(), setY(), setWidth(), setHeight() methods instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.margin">
            <summary>
            Is used to determine the outer invisible border of element. Don't modify this field directly. Use setMargin() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.scale">
            <summary>
            Is used to determine the scale of the element and its children. You can use this field directly to set the scale.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.rotation">
            <summary>
            Is used to determine the rotation of the element and its children. You can use this field directly to set the rotation.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.opacity">
            <summary>
            Is used to determine the opacity of the element and its children. You can use this field directly to set the opacity.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.color">
            <summary>
            Is used to determine the color of the element. You can use this field directly to set the color.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.backgroundColor">
            <summary>
            Is used to determine the color of the element. You can use this field directly to set the color.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.labelColor">
            <summary>
            Is used to determine the color of the element's label. You can use this field directly to set the label color.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.layer">
            <summary>
            Is used to determine the layer(draw order) of the element.  Don't modify this field directly. Use setLayer() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.order">
            <summary>
            Is used to determine the order of an element as a child of its parent. Useful for ordering elements in a container with layout other than 'Free'.
            If order of two elements' are equals, than gameobject names will be taken into account. Don't modify this field directly. Use setOrder() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.elementAspectRatio">
            <summary>
            Is used to determine the aspect ratio of the whole element. If elementAspectRatio is zero, then it will be ignored. Don't modify this field directly. Use setAspectRatio() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.aspectRatioFitStrategy">
            <summary>
            Is used to determine the strategy when an element is resizing to fit the aspect ratio.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.label">
            <summary>
            You can use this field directly to set the label property.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.ignoreMouseOver">
            <summary>
            You can force iGUI to ignore mouse over events and registering iGUIRoot.mouseOverElement by enabling this property.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.enableAnimation">
            <summary>
            Don't modify enableAnimation field directly. Use internal animation methods like fadeTo() for animating elements during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.disableAnimation">
            <summary>
            Don't modify disableAnimation field directly. Use internal animation methods like fadeTo() for animating elements during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.onInit">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onInit) after modifying onInit array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.onEnable">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onEnable) after modifying onEnable array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.onDisable">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onDisable) after modifying onDisable array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.onMouseOver">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onMouseOver) after modifying onMouseOver array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.onMouseOut">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onMouseOut) after modifying onMouseOut array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.initCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIElement.enableCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIElement.disableCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIElement.mouseOverCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIElement.mouseOutCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIElement.rect">
            <summary>
            The rect that used to draw the element actually. Modifying rect directly is not suggested but you can use at your own risk.
            Use setPositionAndSize() or setX(), setY(), setWidth(), setHeight() methods instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.containerRect">
            <summary>
            Copy of the container rect. Don't modify directly.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.baseRect">
            <summary>
            A copy of parent's rect. Don't modify this field directly.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.isRectStatic">
            <summary>
            Internal field. Only use if you're creating a custom container
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.userData">
            <summary>
            Can be used to attach any type of object to elements.
            </summary>
        </member>
        <member name="F:iGUI.iGUIElement.smartObject">
            <summary>
            Is used to access the smartObject that holds the code file which includes event methods.
            </summary>
        </member>
        <member name="P:iGUI.iGUIElement.container">
            <summary>
            Read-only reference to the container of the element
            </summary>
        </member>
        <member name="P:iGUI.iGUIElement.items">
            <summary>
            Read-only reference to child items of the element
            </summary>
        </member>
        <member name="P:iGUI.iGUIElement.allItems">
            <summary>
            Read-only reference to all child items of the element, including disabled ones.
            </summary>
        </member>
        <member name="P:iGUI.iGUIElement.center">
            <summary>
            Read-only center of the element
            </summary>
        </member>
        <member name="P:iGUI.iGUIElement.isMouseOver">
            <summary>
            Read-only. Is used to determine whether the mouse is over the element or not.
            </summary>
        </member>
        <member name="P:iGUI.iGUIElement.itemCount">
            <summary>
            Read-only number of child elements
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIElement.getEventNames-->
        <member name="M:iGUI.iGUIElement.addAction``1(System.String)">
            <summary>
            Is used to add actions or animations to the element at runtime
            </summary>
            <param name="eventName">
            A <see cref="T:System.String" />. For example : "onMouseOver" or "enableAnimation".
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIAction" />. The newly created action.
            </returns>
        </member>
        <member name="M:iGUI.iGUIElement.addAction(System.String,System.String)">
            <summary>
            Is used to add actions or animations to the element at runtime
            </summary>
            <param name="actionTypeName">
            A <see cref="T:System.String" />. For example : "iGUIEnableDisableAction".
            </param>
            <param name="eventName">
            A <see cref="T:System.String" />. For example : "onMouseOver" or "enableAnimation".
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIAction" />. The newly created action.
            </returns>
        </member>
        <member name="M:iGUI.iGUIElement.removeAction(iGUI.iGUIAction,System.String)">
            <summary>
            Is used to remove actions or animations at runtime.
            </summary>
            <param name="action">
            A <see cref="T:iGUI.iGUIAction" />. The action instance to remove.
            </param>
            <param name="eventName">
            A <see cref="T:System.String" />.  For example : "onMouseOver" or "enableAnimation".
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIElement.triggerEvent(System.String)">
            <summary>
            Is used to manually trigger an event. Example: executeEvent("MouseOver")
            </summary>
            <param name="eventName">
            A <see cref="T:System.String" /> containing the name of target event (case sensitive)
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.setVariableName(System.String)">
            <summary>
            Is used to change the variableName at runtime. Element will search the iGUICode script for event methods with the new variableName. Also if there is a public field with the new variableName in iGUICode, then the element's reference will be injected automatically.
            </summary>
            <param name="variableName">
            A <see cref="T:System.String" /> to assign the new variableName
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.fadeTo(System.Single,System.Single)">
            <summary>
            Is used to animate the opacity value.
            </summary>
            <param name="toOpacity">
            A <see cref="T:System.Single" /> as the target opacity between 0 and 1.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.fadeTo(System.Single,System.Single,System.Single)">
            <summary>
            Is used to animate the opacity value.
            </summary>
            <param name="toOpacity">
            A <see cref="T:System.Single" /> as the target opacity between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.fadeTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Is used to animate the opacity value.
            </summary>
            <param name="fromOpacity">
            A <see cref="T:System.Single" /> as the start opacity between 0 and 1.
            </param>
            <param name="toOpacity">
            A <see cref="T:System.Single" /> as the target opacity between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.fadeTo(System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the opacity value.
            </summary>
            <param name="toOpacity">
            A <see cref="T:System.Single" /> as the target opacity between 0 and 1.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.fadeTo(System.Single,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the opacity value.
            </summary>
            <param name="toOpacity">
            A <see cref="T:System.Single" /> as the target opacity between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.fadeTo(System.Single,System.Single,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the opacity value.
            </summary>
            <param name="fromOpacity">
            A <see cref="T:System.Single" /> as the start opacity between 0 and 1.
            </param>
            <param name="toOpacity">
            A <see cref="T:System.Single" /> as the target opacity between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateTo(System.Single,System.Single)">
            <summary>
            Is used to animate the rotation value.
            </summary>
            <param name="toAngle">
            A <see cref="T:System.Single" /> as the target rotation between 0 and 1.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateTo(System.Single,System.Single,System.Single)">
            <summary>
            Is used to animate the rotation value.
            </summary>
            <param name="toAngle">
            A <see cref="T:System.Single" /> as the target rotation between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Is used to animate the rotation value.
            </summary>
            <param name="fromAngle">
            A <see cref="T:System.Single" /> as the start rotation between 0 and 1.
            </param>
            <param name="toAngle">
            A <see cref="T:System.Single" /> as the target rotation between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateTo(System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the rotation value.
            </summary>
            <param name="toAngle">
            A <see cref="T:System.Single" /> as the target rotation between 0 and 1.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateTo(System.Single,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the rotation value.
            </summary>
            <param name="toAngle">
            A <see cref="T:System.Single" /> as the target rotation between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateTo(System.Single,System.Single,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the rotation value.
            </summary>
            <param name="fromAngle">
            A <see cref="T:System.Single" /> as the start rotation between 0 and 1.
            </param>
            <param name="toAngle">
            A <see cref="T:System.Single" /> as the target rotation between 0 and 1.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateBy(System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to rotate an element by the given degree with animation
            </summary>
            <param name="angle">
            A <see cref="T:System.Single" /> in degrees to determine how much degrees will the element rotate.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateBy(System.Single,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to rotate an element by the given degree with animation
            </summary>
            <param name="angle">
            A <see cref="T:System.Single" /> in degrees to determine how much degrees will the element rotate.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateBy(System.Single,System.Single)">
            <summary>
            Is used to rotate an element by the given degree with animation
            </summary>
            <param name="angle">
            A <see cref="T:System.Single" /> in degrees to determine how much degrees will the element rotate.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.rotateBy(System.Single,System.Single,System.Single)">
            <summary>
            Is used to rotate an element by the given degree with animation
            </summary>
            <param name="angle">
            A <see cref="T:System.Single" /> in degrees to determine how much degrees will the element rotate.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,System.Single)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,UnityEngine.Color,System.Single)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="fromColor">
            A <see cref="T:UnityEngine.Color" /> as the start color.
            </param>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,UnityEngine.Color,System.Single,System.Single)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="fromColor">
            A <see cref="T:UnityEngine.Color" /> as the start color.
            </param>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,UnityEngine.Color,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="fromColor">
            A <see cref="T:UnityEngine.Color" /> as the start color.
            </param>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="fromColor">
            A <see cref="T:UnityEngine.Color" /> as the start color.
            </param>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.colorTo(UnityEngine.Color,UnityEngine.Color,System.Single,System.Single,iTweeniGUI.EaseType,iGUI.ColorAnimationTarget)">
            <summary>
            Is used to animate the color value
            </summary>
            <param name="fromColor">
            A <see cref="T:UnityEngine.Color" /> as the start color.
            </param>
            <param name="toColor">
            A <see cref="T:UnityEngine.Color" /> as the target color.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,System.Single)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="fromScale">
            A <see cref="T:UnityEngine.Vector2" /> as the start scale.
            </param>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="fromScale">
            A <see cref="T:UnityEngine.Vector2" /> as the start scale.
            </param>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="fromScale">
            A <see cref="T:UnityEngine.Vector2" /> as the start scale.
            </param>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="fromScale">
            A <see cref="T:UnityEngine.Vector2" /> as the start scale.
            </param>
            <param name="toScale">
            A <see cref="T:UnityEngine.Vector2" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(System.Single,System.Single)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:System.Single" /> as the target scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(System.Single,System.Single,System.Single)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:System.Single" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="fromScale">
            A <see cref="T:System.Single" /> as the start scale.
            </param>
            <param name="toScale">
            A <see cref="T:System.Single" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:System.Single" /> as the target scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(System.Single,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="toScale">
            A <see cref="T:System.Single" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.scaleTo(System.Single,System.Single,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate scale value
            </summary>
            <param name="fromScale">
            A <see cref="T:System.Single" /> as the start scale.
            </param>
            <param name="toScale">
            A <see cref="T:System.Single" /> as the target scale.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,System.Single,System.Single)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,UnityEngine.Rect,System.Single)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,System.Single)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,UnityEngine.Rect,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,UnityEngine.Rect,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.moveTo(UnityEngine.Rect,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position and size
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Rect" /> as the start positionAndSize
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Rect" /> as the target positionAndSize
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Is used to animate position
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Vector2" /> as the start position
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,System.Single,System.Single)">
            <summary>
            Is used to animate position
            </summary>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Is used to animate position
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Vector2" /> as the start position
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,System.Single)">
            <summary>
            Is used to animate position
            </summary>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Vector2" /> as the start position
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Single,iTweeniGUI.EaseType,System.Boolean)">
            <summary>
            Is used to animate position
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Vector2" /> as the start position
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,System.Single,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position
            </summary>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the delay of animation in seconds.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position
            </summary>
            <param name="from">
            A <see cref="T:UnityEngine.Vector2" /> as the start position
            </param>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.positionTo(UnityEngine.Vector2,System.Single,iTweeniGUI.EaseType)">
            <summary>
            Is used to animate position
            </summary>
            <param name="to">
            A <see cref="T:UnityEngine.Vector2" /> as the target position
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the total duration of the animation in seconds.
            </param>
            <param name="easeType">
            A <see cref="T:iTweeniGUI.EaseType" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.updatePosition(UnityEngine.Vector2)">
            <summary>
            Is called internally from animations. Will only update element's position temporarily.
            </summary>
            <param name="newPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.updatePositionDiff(UnityEngine.Vector2,System.Boolean)">
            <summary>
            Is called internally from animations. Will only update element's position temporarily.
            </summary>
            <param name="animPositionDiff">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setPosition(UnityEngine.Vector2)">
            <summary>
            Sets only the position of the element.
            </summary>
            <param name="newPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setPositionSilent(UnityEngine.Vector2)">
            <summary>
            Sets only the x and y values of positionAndSize property of the element. The changes won't be applied until refreshRect is called.
            </summary>
            <param name="newPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setRotation(System.Single)">
            <summary>
            Is used for iTween ValueTo update method
            </summary>
            <param name="rotation">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setOpacity(System.Single)">
            <summary>
            Is used for iTween ValueTo update method
            </summary>
            <param name="opacity">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setColor(UnityEngine.Color)">
            <summary>
            Is used for iTween ValueTo update method
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setLabelColor(UnityEngine.Color)">
            <summary>
            Is used for iTween ValueTo update method
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setBackgroundColor(UnityEngine.Color)">
            <summary>
            Is used for iTween ValueTo update method
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setScale(UnityEngine.Vector2)">
            <summary>
            Is used for iTween ValueTo update method.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setScale(System.Single)">
            <summary>
            Is used for iTween ValueTo update method. Also can be used to scale elements with a float value instead of Vector2.
            </summary>
            <param name="scale">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.init(iGUI.iGUIElement,UnityEngine.Rect)">
            <summary>
            Is called internally when the item is initialized. Calling init() method manually is not suggested.
            </summary>
            <param name="container">
            A <see cref="T:iGUI.iGUIElement" /></param>
            <param name="containerRect">
            A <see cref="T:UnityEngine.Rect" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.init(iGUI.iGUIElement)">
            <summary>
            Is called internally when the item is initialized. Calling init() method manually is not suggested.
            </summary>
            <param name="container">
            A <see cref="T:iGUI.iGUIElement" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setEnabled(System.Boolean)">
            <summary>
            Is used to enable/disable elements.
            </summary>
            <param name="val">
            A <see cref="T:System.Boolean" /> indicates the desired enabled value.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.executeActions(iGUI.iGUIAction[])">
            <summary>
            Is used to execute an array of actions. For triggering a specific event manually use triggerEvent() instead.
            </summary>
            <param name="actions">
            A <see cref="T:iGUI.iGUIAction[]" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.initActions(iGUI.iGUIAction[])">
            <summary>
            Is used to initialize an array of actions by calling their init() method
            </summary>
            <param name="actions">
            A <see cref="T:iGUI.iGUIAction[]" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.refreshActions(UnityEngine.Component[])">
            <summary>
            Is used to refresh an array of actions by calling their refresh() method
            </summary>
            <param name="actions">
            A <see cref="T:UnityEngine.Component[]" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIElement.lateDraw">
            <summary>
            Can be overriden when implementing a new element if needed. lateDraw is called after all elements in container is drawn.
            </summary>
        </member>
        <member name="M:iGUI.iGUIElement.beforeDraw">
            <summary>
            When overriding this method please make sure that you are calling base.beforeDraw() at the beginning of your implememtation.
            </summary>
        </member>
        <member name="M:iGUI.iGUIElement.setAspectRatio(System.Single)">
            <summary>
            Is used to set the aspect ratio at runtime.
            </summary>
            <param name="elementAspectRatio">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setAspectRatio(System.Single,iGUI.AspectRatioFitStrategy)">
            <summary>
            Is used to set the aspect ratio at runtime.
            </summary>
            <param name="elementAspectRatio">
            A <see cref="T:System.Single" /></param>
            <param name="aspectRatioFitStrategy">
            A <see cref="T:iGUI.AspectRatioFitStrategy" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.getAbsoluteRect">
            <summary>
            Returns the absolute rect of the element in pixels
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Rect" /></returns>
        </member>
        <member name="M:iGUI.iGUIElement.getAbsoluteRectNonScaled">
            <summary>
            Returns the absolute rect of the element in pixels non-scaled
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Rect" /></returns>
        </member>
        <member name="M:iGUI.iGUIElement.positionToChildOrder(UnityEngine.Vector2)">
            <summary>
            Internal method.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Vector2" /></param>
            <returns>
            A <see cref="T:System.Int32" /></returns>
        </member>
        <member name="M:iGUI.iGUIElement.refreshLayers">
            <summary>
            Is used to apply the layer changes of the child elements. You don't need to call refreshLayers() if you modify the layer value with setLayer() method.
            </summary>
        </member>
        <member name="M:iGUI.iGUIElement.setLayer(System.Int32)">
            <summary>
            Is used to modify the layer(draw order) of an element
            </summary>
            <param name="layer">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setOrder(System.Int32)">
            <summary>
            Is used to modify the order of an element
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIElement.getCopyStyle(System.String,System.String)">
            <summary>
            Gets a copy of the style with name from the current active skin. If not found tries to get alternative, if still not found, returns an empty GUIStyle.
            </summary>
            <returns>
            The copy style.
            </returns>
            <param name="styleName">
            Style name.
            </param>
            <param name="alternative">
            Alternative.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.getCopyStyle(System.String)">
            <summary>
            Gets a copy of the style with name from the current active skin.
            </summary>
            <returns>
            The copy style.
            </returns>
            <param name="styleName">
            Style name.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.getCopyStyle(UnityEngine.GUIStyle,System.String,System.String)">
            <summary>
            Gets a copy of the style with originalStyle's name from the current active skin. If not found, tries the next parameters. If still not found, returns an empty GUIStyle.
            </summary>
            <returns>
            The copy style.
            </returns>
            <param name="originalStyle">
            Original style.
            </param>
            <param name="styleName">
            Style name.
            </param>
            <param name="alternative">
            Alternative.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.getCopyStyle(UnityEngine.GUIStyle,System.String)">
            <summary>
            Gets a copy of the style with originalStyle's name from the current active skin. If not found, tries the next parameters. If still not found, returns an empty GUIStyle.
            </summary>
            <returns>
            The copy style.
            </returns>
            <param name="originalStyle">
            Original style.
            </param>
            <param name="styleName">
            Style name.
            </param>
        </member>
        <member name="M:iGUI.iGUIElement.setMargin(UnityEngine.RectOffset)">
            <summary>
            Is used to set the margin of element.
            </summary>
            <param name="margin">
            A <see cref="T:UnityEngine.RectOffset" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setX(System.Single)">
            <summary>
            Is used to set the horizontal position of element.
            </summary>
            <param name="x">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setWidth(System.Single)">
            <summary>
            Is used to set the width of element.
            </summary>
            <param name="width">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setY(System.Single)">
            <summary>
            Is used to set the vertical position of element.
            </summary>
            <param name="y">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setHeight(System.Single)">
            <summary>
            Is used to set the height of element.
            </summary>
            <param name="height">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIElement.setPositionAndSize(UnityEngine.Rect)">
            <summary>
            Is used to set the positionAndSize property.
            </summary>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /></param>
        </member>
        <member name="T:iGUI.iGUICustomContent">
            <summary>
            A delegate which is used to customize some allowed gui contents.
            </summary>
        </member>
        <member name="T:iGUI.iGUIFloatHorizontalSlider">
            <summary>
            The class which is used to create horizontal sliders with float value.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.onDragStart">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.onDragEnd">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.dragStartCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.dragEndCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.changeValueOnDragEnd">
            <summary>
            Can be used to force slider to change value only when drag ends.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.valueTipFormat">
            <summary>
            Is used to determine the format of the floating point value that will be shown as a value tip.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.valueTipDuration">
            <summary>
            Is used to determine the duration in seconds that value tip will appear after change of the value. When valueTip Duration property is set to zero, value tip will be disabled.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.min">
            <summary>
            Is used to determine the minimum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.max">
            <summary>
            Is used to determine the maximum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.restrictValue">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.allowedMin">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.allowedMax">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.value">
            <summary>
            Is used to set or get the current value of slider without triggering ValueChange event. If you want iGUI to trigger ValueChange event use setValue() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.tipDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.sliderStyle">
            <summary>
            Is used to fine tune the visual appearance of slider background. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.thumbStyle">
            <summary>
            Is used to fine tune the visual appearance of slider thumb. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatHorizontalSlider.tipStyle">
            <summary>
            Is used to fine tune the visual appearance of the value tip. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIFloatHorizontalSlider.getEventNames-->
        <member name="M:iGUI.iGUIFloatHorizontalSlider.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUIFloatHorizontalSlider.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIFloatHorizontalSlider.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIFloatHorizontalSlider.setValue(System.Single)">
            <summary>
            Sets the value of slider with triggering ValueChange event. To chnage the value of slider without triggering ValueChange event please use value field directly.
            </summary>
            <param name="value">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIFloatHorizontalSlider.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="tipFontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="T:iGUI.iGUIFloatVerticalSlider">
            <summary>
            The class which is used to create vertical sliders with float value.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.onDragStart">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.onDragEnd">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.dragStartCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.dragEndCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.changeValueOnDragEnd">
            <summary>
            Can be used to force slider to change value only when drag ends.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.valueTipFormat">
            <summary>
            Is used to determine the format of the floating point value that will be shown as a value tip.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.valueTipDuration">
            <summary>
            Is used to determine the duration in seconds that value tip will appear after change of the value. When valueTip Duration property is set to zero, value tip will be disabled.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.labelHeight">
            <summary>
            Don't modify this field directly. Use setLabelHeight() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.min">
            <summary>
            Is used to determine the minimum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.max">
            <summary>
            Is used to determine the maximum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.restrictValue">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.allowedMin">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.allowedMax">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.value">
            <summary>
            Is used to set or get the current value of slider without triggering ValueChange event. If you want iGUI to trigger ValueChange event use setValue() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.tipDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.sliderStyle">
            <summary>
            Is used to fine tune the visual appearance of slider background. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.thumbStyle">
            <summary>
            Is used to fine tune the visual appearance of slider thumb. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIFloatVerticalSlider.tipStyle">
            <summary>
            Is used to fine tune the visual appearance of the value tip. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIFloatVerticalSlider.getEventNames-->
        <member name="M:iGUI.iGUIFloatVerticalSlider.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIFloatVerticalSlider.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIFloatVerticalSlider.setValue(System.Single)">
            <summary>
            Sets the value of slider with triggering ValueChange event. To chnage the value of slider without triggering ValueChange event please use value field directly.
            </summary>
            <param name="value">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIFloatVerticalSlider.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="tipFontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="T:iGUI.iGUIIntHorizontalSlider">
            <summary>
            The class which is used to create horizontal sliders with int value.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.onDragStart">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.onDragEnd">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.dragStartCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.dragEndCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.changeValueOnDragEnd">
            <summary>
            Can be used to force slider to change value only when drag ends.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.valueTipDuration">
            <summary>
            Is used to determine the duration in seconds that value tip will appear after change of the value. When valueTip Duration property is set to zero, value tip will be disabled.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.min">
            <summary>
            Is used to determine the minimum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.max">
            <summary>
            Is used to determine the maximum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.restrictValue">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.allowedMin">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.allowedMax">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.value">
            <summary>
            Is used to get the current value of slider without triggering ValueChange event. If you want to set value, please use setValue() and setValueSilent() methods.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.tipDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.sliderStyle">
            <summary>
            Is used to fine tune the visual appearance of slider background. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.thumbStyle">
            <summary>
            Is used to fine tune the visual appearance of slider thumb. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.tipStyle">
            <summary>
            Is used to fine tune the visual appearance of the value tip. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntHorizontalSlider.customTipCallback">
            <summary>
            The custom tip callback. Just bind a method that returns a GUIContent and it'll be shown as value tooltip.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIIntHorizontalSlider.getEventNames-->
        <member name="M:iGUI.iGUIIntHorizontalSlider.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUIIntHorizontalSlider.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIIntHorizontalSlider.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIIntHorizontalSlider.setValue(System.Int32)">
            <summary>
            Sets the value of slider with triggering ValueChange event. To chnage the value of slider without triggering ValueChange event please use setValueSilent.
            </summary>
            <param name="value">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iGUI.iGUIIntHorizontalSlider.setValueSilent(System.Int32)">
            <summary>
            Sets the value of slider without triggering ValueChange event.
            </summary>
            <param name="value">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iGUI.iGUIIntHorizontalSlider.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="tipFontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="T:iGUI.iGUIIntVerticalSlider">
            <summary>
            The class which is used to create vertical sliders with float value.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.onDragStart">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.onDragEnd">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.dragStartCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.dragEndCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.changeValueOnDragEnd">
            <summary>
            Can be used to force slider to change value only when drag ends.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.valueTipDuration">
            <summary>
            Is used to determine the duration in seconds that value tip will appear after change of the value. When valueTip Duration property is set to zero, value tip will be disabled.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.labelHeight">
            <summary>
            Don't modify this field directly. Use setLabelHeight() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.min">
            <summary>
            Is used to determine the minimum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.max">
            <summary>
            Is used to determine the maximum allowed value inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.restrictValue">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.allowedMin">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.allowedMax">
            <summary>
            Is used to restrict slider's value to a sub-interval of min and max.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.value">
            <summary>
            Is used to get the current value of slider without triggering ValueChange event. If you want to set value, please use setValue() and setValueSilent() methods.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.tipDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.sliderStyle">
            <summary>
            Is used to fine tune the visual appearance of slider background. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.thumbStyle">
            <summary>
            Is used to fine tune the visual appearance of slider thumb. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIIntVerticalSlider.tipStyle">
            <summary>
            Is used to fine tune the visual appearance of the value tip. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIIntVerticalSlider.getEventNames-->
        <member name="M:iGUI.iGUIIntVerticalSlider.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIIntVerticalSlider.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIIntVerticalSlider.setValue(System.Int32)">
            <summary>
            Sets the value of slider with triggering ValueChange event. To chnage the value of slider without triggering ValueChange event please use setValueSilent.
            </summary>
            <param name="value">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iGUI.iGUIIntVerticalSlider.setValueSilent(System.Int32)">
            <summary>
            Sets the value of slider without triggering ValueChange event.
            </summary>
            <param name="value">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iGUI.iGUIIntVerticalSlider.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="tipFontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="T:iGUI.iGUIPasswordField">
            <summary>
            The class which is used to create masked text fields.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.onFocus">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onFocus) after modifying onFocus array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.onBlur">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onBlur) after modifying onBlur array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.onEnterKey">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onEnterKey) after modifying onEnterKey array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.onTabKey">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onTabKey) after modifying onTabKey array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.focusCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.blurCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.enterKeyCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.tabKeyCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.value">
            <summary>
            Is used to get or set the value of the password field
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.maxLength">
            <summary>
            Is used to limit maximum number of characters allowed. To allow any number of characters just give a negative value.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.maskCharacter">
            <summary>
            Is used to determine the character for masking the input. Defaults to *.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.style">
            <summary>
            Is used to fine tune the visual appearance of the password field. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPasswordField.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIPasswordField.getEventNames-->
        <member name="M:iGUI.iGUIPasswordField.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUIPasswordField.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPasswordField.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPasswordField.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPasswordField.focus">
            <summary>
            Is used to move cursor to password field by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPasswordField.unFocus">
            <summary>
            Is used to remove cursor from password field by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPasswordField.hasFocus">
            <summary>
            Checks whether the field has focus or not.
            </summary>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:iGUI.iGUIPasswordField.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIPasswordField.setValue(System.String)">
            <summary>
            Is used to set value of the field and triggering Value Changed event.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="M:iGUI.iGUIPasswordField.selectAll">
            <summary>
            Selects all field content if the field has focus.
            </summary>
            <returns>
            Returns true if text is selected successfully.
            </returns>
        </member>
        <member name="T:iGUI.iGUIRoot">
            <summary>
            The class which is used to create the iGUI scene root.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.onResolutionChange">
            <summary>
            Modifying action lists directly is not suggested.
            But if you need to do so, call initActions(onResolutionChange) after modifying onResolutionChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.resolutionChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIRoot.afterDrawCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIRoot.guiSkin">
            <summary>
            Don't modify at runtime. Use setSkin() method to modify.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.skin">
            <summary>
            Don't modify at runtime. Use setSkin() method to modify.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.windowId">
            <summary>
            Don't modify at runtime. If you need a unique window id just call getWindowId() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.mousePositionGUI">
            <summary>
            Is used to get the mouse position in matching gui space format.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.mousePositionGUIUnscaled">
            <summary>
            Is used to get the mouse position in matching gui space format unscaled.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.instance">
            <summary>
            Is used to get the root instance. Don't modify at runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.useLayout">
            <summary>
            Is used to determine whether iGUI skips the layout phase or not. You will just need this if you are writing your own custom control.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.allowedScreenOrientations">
            <summary>
            Is used to determine the allowed screen orientations.
            If modified during runtime on iOS devices, be sure to call iGUIiOSHelper.refresh() after modifying to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.autoRefreshOnResolutionChange">
            <summary>
            Is used to determine whether the resolution changes apply to gui elements automatically or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.tipStyle">
            <summary>
            Is used to fine tune the visual appearance of the tooltip.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.tipMinSize">
            <summary>
            Minimum tooltip size. Used internally.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.tooltipIcon">
            <summary>
            Is used to determine the icon in the tooltip.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.tooltipAppearTime">
            <summary>
            Is used to determine the time in seconds, how much will the mouse wait on an element to make tooltip appear.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.tooltipRenderStrategy">
            <summary>
            Is used to determine the tooltip will be drawn with a window or label.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.dynamicFontResizing">
            <summary>
            Is used to enable/disable dynamic font resizing. Disabled by default in mobile devices. Don't modify at runtime. To modify at runtime please use setDynamicFontResizing() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.mobileKeyboardOptimization">
            <summary>
            Is used to enable/disable mobile keyboard optimization.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.forceMouseOverOnMobile">
            <summary>
            To force mouseOver usage on mobile.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.manualCodeFile">
            <summary>
            Is used to manually determine the iGUICode file to use. You'll only need to bind a code file manually when you need to share the same code file between multiple scenes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.alertWindowStyle">
            <summary>
            Is used to fine tune the visual appearance of the alert window. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.alertLabelStyle">
            <summary>
            Is used to fine tune the visual appearance of the alert label. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.alertButtonStyle">
            <summary>
            Is used to fine tune the visual appearance of the alert buttons. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.injectMousePositionManually">
            <summary>
            Is used to allow injecting mouse position manually by setting mousePositionGUI field.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.mouseCursor">
            <summary>
            Is used to replace the mouse cursor with a texture.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.mouseCursorSize">
            <summary>
            The size of mouse cursor. Can be relative (0, 2) or absolute ( &gt;2 ). If equals to Vector2.zero, the image will be drawn with its original size.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.mouseCursorScaleMode">
            <summary>
            Is used to determine the scale mode of mouse cursor texture.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.mouseCursorAspectRatio">
            <summary>
            Is used to determine the aspect ratio of mouse cursor texture. If set to zero, will be ignored.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot.cursorTipOffset">
            <summary>
            Is used to match the tip of the cursor image with actual mouse position. Relativeness or absoluteness is determined by the relativeness of mouseCursorSize.
            </summary>
        </member>
        <member name="F:iGUI.iGUIRoot._isBuildTargetTouchDevice">
            <summary>
            Only available in editor.
            </summary>
        </member>
        <member name="P:iGUI.iGUIRoot._buttonClickableAreaTolerance">
            <summary>
            Is used to determine the tolerance that the button will trigger click event if the touch is closer than this tolerance.
            Can be a relative(-2, 2) or absolute ( &gt;2 ) value. Relative values are relative to screen height.
            Root's refreshRect() method must be called after setting to apply new value to all buttons.
            </summary>
            <value>
            The button clickable area tolerance.
            </value>
        </member>
        <member name="P:iGUI.iGUIRoot.isTouchDevice">
            <summary>
            Read-only property. Is used to get whether the build target is iOS-Android or Standalone-Web
            </summary>
        </member>
        <member name="P:iGUI.iGUIRoot.isTouchPlayer">
            <summary>
            Read-only property. Is used to get whether current player is iOS-Android or Standalone-Web-Editor
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIRoot.getEventNames-->
        <member name="M:iGUI.iGUIRoot.assignVariableName(iGUI.iGUIElement)">
            <summary>
            Is used to assign a unique variable name to given element in editor. Only use when implementing new elements. Don't use at runtime.
            </summary>
            <param name="elem">
            A <see cref="T:iGUI.iGUIElement" /> to assign variableName.
            </param>
        </member>
        <member name="M:iGUI.iGUIRoot.refresh">
            <summary>
            Can be called manually to refresh and recalculate all iGUI elements in the scene at runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUIRoot.setSkin(UnityEngine.GUISkin)">
            <summary>
            Is used to change skin dynamically at runtime.
            </summary>
            <param name="newSkin">
            A <see cref="T:UnityEngine.GUISkin" /></param>
        </member>
        <member name="M:iGUI.iGUIRoot.prepareTooltip(UnityEngine.GUIContent,UnityEngine.Vector2)">
            <summary>
            Is used to prepare tooltip for drawing at the given position. You can call prepareTooltip() once and then call drawTooltip() every frame to pop a static tooltip.
            </summary>
            <param name="content">
            A <see cref="T:UnityEngine.GUIContent" /></param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIRoot.prepareTooltip(UnityEngine.GUIContent,iGUI.iGUIElement)">
            <summary>
            Is used to prepare tooltip for drawing over the given element. You can call prepareTooltip() once and then call drawTooltip() every frame to pop a static tooltip.
            </summary>
            <param name="content">
            A <see cref="T:UnityEngine.GUIContent" /></param>
            <param name="target">
            A <see cref="T:iGUI.iGUIElement" /></param>
        </member>
        <member name="M:iGUI.iGUIRoot.prepareTooltipFixedBottom(UnityEngine.GUIContent,System.Single)">
            <summary>
            Is used to prepare tooltip for drawing with fixed bottom. You can call prepareTooltip() once and then call drawTooltip() every frame to pop a static tooltip.
            </summary>
            <param name="content">
            A <see cref="T:UnityEngine.GUIContent" /></param>
            <param name="fixedBottom">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIRoot.prepareTooltipFixedLeft(UnityEngine.GUIContent,System.Single)">
            <summary>
            Is used to prepare tooltip for drawing with fixed left. You can call prepareTooltip() once and then call drawTooltip() every frame to pop a static tooltip.
            </summary>
            <param name="content">
            A <see cref="T:UnityEngine.GUIContent" /></param>
            <param name="fixedLeft">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIRoot.prepareTooltip(UnityEngine.GUIContent)">
            <summary>
            Is used to prepare tooltip for drawing at the current mouse position. You can call prepareTooltip() once and then call drawTooltip() every frame to pop a static tooltip.
            </summary>
            <param name="content">
            A <see cref="T:UnityEngine.GUIContent" /></param>
        </member>
        <member name="M:iGUI.iGUIRoot.drawTooltip">
            <summary>
            Has to be called every frame to trigger drawing of tooltip.
            </summary>
        </member>
        <member name="M:iGUI.iGUIRoot.getTexture(System.String)">
            <summary>
            Is used to get a png texture from iGUI/Files folder.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /></param>
            <returns>
            A <see cref="T:UnityEngine.Texture2D" /></returns>
        </member>
        <member name="M:iGUI.iGUIRoot.getTexturePsd(System.String)">
            <summary>
            Is used to get a psd texture from iGUI/Files folder.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /></param>
            <returns>
            A <see cref="T:UnityEngine.Texture2D" /></returns>
        </member>
        <member name="M:iGUI.iGUIRoot.getWindowId">
            <summary>
            Is used to get a unique windowId. Will be incremented on every call.
            </summary>
            <returns>
            A <see cref="T:System.Int32" /> to use as a window id.
            </returns>
        </member>
        <member name="M:iGUI.iGUIRoot.setDynamicFontResizing(System.Boolean)">
            <summary>
            Is used to determine whether dynamic font resizing is enabled or not at runtime. Useless for mobile devices.
            </summary>
            <param name="enabled">
            A <see cref="T:System.Boolean" /></param>
        </member>
        <member name="M:iGUI.iGUIRoot.alert(System.String,System.String)">
            <summary>
            Is used to create an automatically generated alert window at runtime.
            </summary>
            <param name="title">
            A <see cref="T:System.String" /></param>
            <param name="message">
            A <see cref="T:System.String" /></param>
            <returns>
            A <see cref="T:iGUI.iGUIWindow" /></returns>
        </member>
        <member name="M:iGUI.iGUIRoot.alert(System.String,System.String,System.String,iGUI.iGUIEventCallback)">
            <summary>
            Is used to create an automatically generated alert window at runtime.
            </summary>
            <param name="title">
            A <see cref="T:System.String" /></param>
            <param name="message">
            A <see cref="T:System.String" /></param>
            <param name="okText">
            A <see cref="T:System.String" /></param>
            <param name="okCallback">
            A <see cref="T:iGUI.iGUIEventCallback" /></param>
            <returns>
            A <see cref="T:iGUI.iGUIWindow" /></returns>
        </member>
        <member name="M:iGUI.iGUIRoot.alert(System.String,System.String,System.String,iGUI.iGUIEventCallback,System.String,iGUI.iGUIEventCallback)">
            <summary>
            Is used to create an automatically generated alert window at runtime.
            </summary>
            <param name="title">
            A <see cref="T:System.String" /></param>
            <param name="message">
            A <see cref="T:System.String" /></param>
            <param name="okText">
            A <see cref="T:System.String" /></param>
            <param name="okCallback">
            A <see cref="T:iGUI.iGUIEventCallback" /></param>
            <param name="cancelText">
            A <see cref="T:System.String" /></param>
            <param name="cancelCallback">
            A <see cref="T:iGUI.iGUIEventCallback" /></param>
            <returns>
            A <see cref="T:iGUI.iGUIWindow" /></returns>
        </member>
        <member name="T:iGUI.iGUIScrollView">
            <summary>
            The class which is used to create scrollable views.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.layout">
            <summary>
            Is used determine the line-up of child elements. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.reverseOrder">
            <summary>
            Is used to reverse the layout order of items. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.ignoreDisabledElements">
            <summary>
            Is used to determine, whether disabled elements taken into account when calculating the layout of child elements.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.padding">
            <summary>
            Is used restrict the usable area of a container. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.itemsMargin">
            <summary>
            Is used determine the spacing between child elements. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.isAreaWidthRelative">
            <summary>
            Is used to determine whether the usable area width is relative or not. If modified at runtime be sure to call refreshStyle() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.areaWidth">
            <summary>
            Is used to determine the width of usable area. If modified at runtime be sure to call refreshStyle() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.isAreaHeightRelative">
            <summary>
            Is used to determine whether the usable area height is relative or not. If modified at runtime be sure to call refreshStyle() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.areaHeight">
            <summary>
            Is used to determine the height of usable area. If modified at runtime be sure to call refreshStyle() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.alwaysShowHorizontalScrollbar">
            <summary>
            Is used to determine wheter horizontal scroll bar will be shown always
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.alwaysShowVerticalScrollbar">
            <summary>
            Is used to determine wheter vertical scroll bar will be shown always
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.scrollPosition">
            <summary>
            Is used to set or get the position of the leftmost top point of the usable area's currently viewable portion, in pixels.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.brakeSpeed">
            <summary>
            Is used to determine the brake speed of scrolling after releasing touch. Useless for non-touch devices.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.isLocked">
            <summary>
            Is used to lock/release scroll view.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.hideScrollBars">
            <summary>
            Is used to determine whether to show or hide scroll bars
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.ignoreScrollBars">
            <summary>
            Is used to determine whether scrollbar inputs will be ignored or not
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.horizontalBounceEffect">
            <summary>
            Is used to determine whether horizontal bounce effect will be enabled or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.verticalBounceEffect">
            <summary>
            Is used to determine whether vertical bounce effect will be enabled or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIScrollView.dragDeadZone">
            <summary>
            Is used to determine minimum pixels that a finger has to travel before activate scrolling.
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.addSmartObject(System.String)">
            <summary>
            Is used to create and add an instance of smart object with the given name.
            </summary>
            <param name="smartObjectName">
            A <see cref="T:System.String" /> as the name of smartobject file.
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIElement" /> which is the root of smart object and has the iGUISmartObject component.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1(System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1(System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1(UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1(System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement``1(System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String,System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String,System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String,System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElement(System.String,System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElementSilent``1">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addElementSilent(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.addSmartObjectSilent(System.String)">
            <summary>
            Is used to create and add an instance of smart object with the given name but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="smartObjectName">
            A <see cref="T:System.String" /> as the name of smartobject file.
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIElement" /> which is the root of smart object and has the iGUISmartObject component.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.removeElementSilent(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.removeElement(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime.
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.removeAll">
            <summary>
            Is used to remove all elements in this container at runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.positionToChildOrder(UnityEngine.Vector2)">
            <summary>
            Calculates the child order for a position given in screen space.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Vector2" /> given in screen space.
            </param>
            <returns>
            A <see cref="T:System.Int32" /> as order.
            </returns>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToBottom">
            <summary>
            Is used to scroll to bottom with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToBottom(System.Single)">
            <summary>
            Is used to scroll to bottom with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToRight">
            <summary>
            Is used to scroll to right with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToRight(System.Single)">
            <summary>
            Is used to scroll to right with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToTop">
            <summary>
            Is used to scroll to top with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToTop(System.Single)">
            <summary>
            Is used to scroll to top with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToLeft">
            <summary>
            Is used to scroll to left with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToLeft(System.Single)">
            <summary>
            Is used to scroll to left with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollTo(UnityEngine.Vector2)">
            <summary>
            Is used to scroll to target with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollTo(UnityEngine.Vector2,System.Single)">
            <summary>
            Is used to scroll to target with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToVertical(System.Single,System.Single)">
            <summary>
            Is used to scroll to target vertical position with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:System.Single" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.scrollToHorizontal(System.Single,System.Single)">
            <summary>
            Is used to scroll to target horizontal position with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:System.Single" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setVerticalScrollPosition(System.Single)">
            <summary>
            Is used to set vertical scroll position
            </summary>
            <param name="newPosition">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setHorizontalScrollPosition(System.Single)">
            <summary>
            Is used to set horizontal scroll position
            </summary>
            <param name="newPosition">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setScrollPosition(UnityEngine.Vector2)">
            <summary>
            Is used to set scroll position
            </summary>
            <param name="newPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setAreaWidth(System.Single)">
            <summary>
            Sets the width of the area.
            </summary>
            <param name="areaWidth">
            Area width.
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setAreaHeight(System.Single)">
            <summary>
            Sets the height of the area.
            </summary>
            <param name="areaHeight">
            Area height.
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setAreaWidth(System.Boolean,System.Single)">
            <summary>
            Sets the width of the area.
            </summary>
            <param name="isRelative">
            Is relative.
            </param>
            <param name="areaWidth">
            Area width.
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setAreaHeight(System.Boolean,System.Single)">
            <summary>
            Sets the height of the area.
            </summary>
            <param name="isRelative">
            Is relative.
            </param>
            <param name="areaHeight">
            Area height.
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setAreaSize(System.Single,System.Single)">
            <summary>
            Sets the size of the area.
            </summary>
            <param name="areaWidth">
            Area width.
            </param>
            <param name="areaHeight">
            Area height.
            </param>
        </member>
        <member name="M:iGUI.iGUIScrollView.setAreaSize(System.Boolean,System.Boolean,System.Single,System.Single)">
            <summary>
            Sets the size of the area.
            </summary>
            <param name="isWidthRelative">
            Is width relative.
            </param>
            <param name="isHeightRelative">
            Is height relative.
            </param>
            <param name="areaWidth">
            Area width.
            </param>
            <param name="areaHeight">
            Area height.
            </param>
        </member>
        <member name="T:iGUI.iGUISwitch">
            <summary>
            The class which is used to create iOS style switch, specialized for touch devices.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.onDragStart">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.onDragEnd">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.dragStartCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUISwitch.dragEndCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUISwitch.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUISwitch.changeValueOnDragEnd">
            <summary>
            Can be used to force switch to change value only when drag ends.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.value">
            <summary>
            Is used to get the value of switch. Read-only.
            To set the value of switch use setValue() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.onOffStyle">
            <summary>
            Is used to fine tune the visual appearance of onOff image. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.thumbStyle">
            <summary>
            Is used to fine tune the visual appearance of thumb. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUISwitch.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUISwitch.getEventNames-->
        <member name="M:iGUI.iGUISwitch.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUISwitch.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUISwitch.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUISwitch.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUISwitch.setValue(System.Boolean,System.Boolean)">
            <summary>
            Is used to set the value of switch.
            </summary>
            <param name="value">
            A <see cref="T:System.Boolean" /> to determine the new value of switch.
            </param>
            <param name="isSilent">
            ValueChange event won't be fired if this parameter is set to true. Defaults to false.
            </param>
        </member>
        <member name="M:iGUI.iGUISwitch.setDynamicFontSize(System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="F:iGUI.iGUITextarea.onFocus">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onFocus) after modifying onFocus array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.onBlur">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onBlur) after modifying onBlur array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.onTabKey">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onTabKey) after modifying onTabKey array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.focusCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextarea.blurCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextarea.tabKeyCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextarea.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextarea.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.value">
            <summary>
            Is used to get or set the value of the password field
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.maxLength">
            <summary>
            Is used to limit maximum number of characters allowed. To allow any number of characters just give a negative value.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.style">
            <summary>
            Is used to fine tune the visual appearance of the textarea. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextarea.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUITextarea.getEventNames-->
        <member name="M:iGUI.iGUITextarea.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUITextarea.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextarea.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextarea.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextarea.focus">
            <summary>
            Is used to move cursor to textarea by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextarea.unFocus">
            <summary>
            Is used to remove cursor from textarea by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextarea.hasFocus">
            <summary>
            Checks whether the field has focus or not.
            </summary>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:iGUI.iGUITextarea.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUITextarea.setValue(System.String)">
            <summary>
            Is used to set value of the field and triggering Value Changed event.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="M:iGUI.iGUITextarea.getHighlightedText">
            <summary>
            Is used to get the highlighted text in the field. If field doesn't have focus, returns empty string.
            </summary>
            <returns>
            A <see cref="T:System.String" /></returns>
        </member>
        <member name="M:iGUI.iGUITextarea.selectAll">
            <summary>
            Selects all field content if the field has focus.
            </summary>
            <returns>
            Returns true if text is selected successfully.
            </returns>
        </member>
        <member name="F:iGUI.iGUITextfield.onFocus">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onFocus) after modifying onFocus array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.onBlur">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onBlur) after modifying onBlur array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.onEnterKey">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onEnterKey) after modifying onEnterKey array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.onTabKey">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onTabKey) after modifying onTabKey array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.focusCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextfield.blurCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextfield.enterKeyCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextfield.tabKeyCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextfield.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITextfield.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.value">
            <summary>
            Is used to get or set the value of the text field
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.maxLength">
            <summary>
            Is used to limit maximum number of characters allowed. To allow any number of characters just give a negative value.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.style">
            <summary>
            Is used to fine tune the visual appearance of textfield. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUITextfield.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUITextfield.getEventNames-->
        <member name="M:iGUI.iGUITextfield.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUITextfield.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextfield.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextfield.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextfield.focus">
            <summary>
            Is used to move cursor to textfield by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextfield.unFocus">
            <summary>
            Is used to remove cursor from textfield by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUITextfield.hasFocus">
            <summary>
            Checks whether the field has focus or not.
            </summary>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:iGUI.iGUITextfield.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUITextfield.setValue(System.String)">
            <summary>
            Is used to set value of the field and triggering Value Changed event.
            </summary>
            <param name="value">
            A <see cref="T:System.String" /></param>
        </member>
        <member name="M:iGUI.iGUITextfield.getHighlightedText">
            <summary>
            Is used to get the highlighted text in the field. If field doesn't have focus, returns empty string.
            </summary>
            <returns>
            A <see cref="T:System.String" /></returns>
        </member>
        <member name="M:iGUI.iGUITextfield.selectAll">
            <summary>
            Selects all field content if the field has focus.
            </summary>
            <returns>
            Returns true if text is selected successfully.
            </returns>
        </member>
        <member name="F:iGUI.iGUIWindow.layout">
            <summary>
            Is used determine the line-up of child elements. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.reverseOrder">
            <summary>
            Is used to reverse the layout order of items. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.ignoreDisabledElements">
            <summary>
            Is used to determine, whether disabled elements taken into account when calculating the layout of child elements.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.autoPadding">
            <summary>
            Is used to determine whether padding will be auto calculated when the skin changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.padding">
            <summary>
            Is used restrict the usable area of a container. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.itemsMargin">
            <summary>
            Is used determine the spacing between child elements. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.style">
            <summary>
            Is used to fine tune the visual appearance of the window. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIWindow.windowId">
            <summary>
            The unique id of the window.
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1(System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1(System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1(UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1(System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement``1(System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String,System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String,System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String,System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElement(System.String,System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElementSilent``1">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addElementSilent(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.addSmartObjectSilent(System.String)">
            <summary>
            Is used to create and add an instance of smart object with the given name but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="smartObjectName">
            A <see cref="T:System.String" /> as the name of smartobject file.
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIElement" /> which is the root of smart object and has the iGUISmartObject component.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.removeElementSilent(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.removeElement(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime.
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.removeAll">
            <summary>
            Is used to remove all elements in this container at runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.positionToChildOrder(UnityEngine.Vector2)">
            <summary>
            Calculates the child order for a position given in screen space.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Vector2" /> given in screen space.
            </param>
            <returns>
            A <see cref="T:System.Int32" /> as order.
            </returns>
        </member>
        <member name="M:iGUI.iGUIWindow.setDynamicFontSize(System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIWindow.bringToFront">
            <summary>
            Is used to bring window on top of other elements
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.bringToBack">
            <summary>
            Is used to bring window to the back of other windows
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.bringToFrontLate">
            <summary>
            Is used to bring window on top of other elements right after the window is drawn.
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.bringToBackLate">
            <summary>
            Is used to bring window to the back of other windows right after the window is drawn.
            </summary>
        </member>
        <member name="M:iGUI.iGUIWindow.setCustomStyle(System.String)">
            <summary>
            Is used to assign a custom style at runtime.
            </summary>
            <param name="name">
            Style Name.
            </param>
        </member>
        <member name="T:iGUI.iGUILabel">
            <summary>
            The class which is used to create labels.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.autoCollapseHeight">
            <summary>
            If set to true, collapseHeight() will be called automatically at calling refreshRect()
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.dropBasicShadow">
            <summary>
            Is used to determine whether the label will have shadow. Shadow will add a draw call so only use when really necessary.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.shadowDisplacement">
            <summary>
            The shadow displacement. The values between interval (-2, 2) will be processed as relative to font height.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.basicOutline">
            <summary>
            Is used to determine whether the label will have outline. Outline will add 4 draw calls so only use when really necessary.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.outlineThickness">
            <summary>
            The outline thickness. The values between interval (-2, 2) will be processed as relative to font height.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.style">
            <summary>
            Is used to fine tune the visual appearance of the label. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.useHover">
            <summary>
            Is used to determine whether hover style is used or not. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUILabel.hoverStyle">
            <summary>
            Is used to fine tune the visual appearance of the label hover. Can be modified during runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUILabel.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUILabel.setDynamicFontSize(System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUILabel.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUILabel.collapseHeight">
            <summary>
            Is used to collapse the height, based on width and font size of label
            </summary>
        </member>
        <member name="M:iGUI.iGUILabel.setShadowDisplacement(UnityEngine.Vector2)">
            <summary>
            Sets the shadow displacement.
            </summary>
            <param name="displacement">
            Displacement.
            </param>
        </member>
        <member name="M:iGUI.iGUILabel.setOutlineThickness(System.Single)">
            <summary>
            Sets the outline thickness.
            </summary>
            <param name="thickness">Thickness.</param>
        </member>
        <member name="T:iGUI.iGUIImage">
            <summary>
            The class which is used to create images.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.onClick">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onClick) after modifying onClick array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.onDoubleClick">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onDoubleClick) after modifying onDoubleClick array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.clickCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIImage.doubleClickCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIImage.fireClickEventOnDoubleClick">
            <summary>
            Is used to determine whether click event will be triggered along with double-click event when a double click is performed.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.consumeClicks">
            <summary>
            Is used to control whether images consume clicks or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.ignoreClicks">
            <summary>
            Is used to control whether images completely ignore clicks or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.image">
            <summary>
            The image to show.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.hoverImage">
            <summary>
            The image to show when the mouse is over.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.scaleMode">
            <summary>
            Is used to determine the scale mode of image.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.alpha">
            <summary>
            Is used to determine whether alpha channel will be ignored or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIImage.aspectRatio">
            <summary>
            Is used to determine the aspect ratio of image. If set to zero then the original aspect ratio of image will be used.
            </summary>
        </member>
        <member name="M:iGUI.iGUIImage.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIImage.getEventNames-->
        <member name="T:iGUI.iGUIProgressBar">
            <summary>
            The class which is used to create basic progress bars.
            </summary>
        </member>
        <member name="F:iGUI.iGUIProgressBar.min">
            <summary>
            Minimum value allowed.
            </summary>
        </member>
        <member name="F:iGUI.iGUIProgressBar.max">
            <summary>
            Maximum value allowed.
            </summary>
        </member>
        <member name="F:iGUI.iGUIProgressBar.value">
            <summary>
            Is used to set or get the current value of progress bar.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member F:iGUI.iGUIProgressBar.isVertical-->
        <member name="F:iGUI.iGUIProgressBar.emptyStyle">
            <summary>
            Is used to fine tune the visual appearance of the empty bar.
            </summary>
        </member>
        <member name="F:iGUI.iGUIProgressBar.fillStyle">
            <summary>
            Is used to fine tune the visual appearance of the filled bar.
            </summary>
        </member>
        <member name="M:iGUI.iGUIProgressBar.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIProgressBar.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIProgressBar.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="T:iGUI.iGUILoadingIndicator">
            <summary>
            The class which is used to create loading indicators.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.type">
            <summary>
            Is used to determine the type of loading indicator. If modified at runtime be sure to call refreshStyle() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.image">
            <summary>
            The image to rotate.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.scaleMode">
            <summary>
            Is used to determine the scale mode of loading image.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.alpha">
            <summary>
            Is used to determine whether alpha channel will be ignored or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.aspectRatio">
            <summary>
            Is used to determine the aspect ratio of loading image. If set to zero then the original aspect ratio of loading image will be used.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.rotateDirection">
            <summary>
            Is used to determine the rotation direction of loading indicator. If modified at runtime be sure to call refreshStyle() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.rotationSpeed">
            <summary>
            Is used to get or set the rotation speed of loading indicator.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.rotationSteps">
            <summary>
            Is used to determine the number of steps that the indicator need to complete a full rotation.  If modified at runtime be sure to call refreshStyle() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUILoadingIndicator.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUILoadingIndicator.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUILoadingIndicator.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUILoadingIndicator.setDynamicFontSize(System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUILoadingIndicator.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="T:iGUI.iGUICountdown">
            <summary>
            The class which is used to create Countdowns.
            </summary>
        </member>
        <member name="F:iGUI.iGUICountdown.onComplete">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onComplete) after modifying onClick array.
            </summary>
        </member>
        <member name="F:iGUI.iGUICountdown.completeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUICountdown.value">
            <summary>
            Current value of the countdown.
            </summary>
        </member>
        <member name="M:iGUI.iGUICountdown.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUICountdown.getEventNames-->
        <member name="M:iGUI.iGUICountdown.startCountdown(System.Int32)">
            <summary>
            Is used to start countdown at runtime.
            </summary>
            <param name="startValue">
            A <see cref="T:System.Int32" /> to determine the initial value of countdown.
            </param>
        </member>
        <member name="T:iGUI.iGUIDropDownList">
            <summary>
            The class which is used to create Drop Down Lists.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.onListActivate">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.onListDeactivate">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.listActivateCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.listDeactivateCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.visibleListItemCount">
            <summary>
            Is used to determine the height of the dropped down list. If there exists more items than visibleListItemCount then scrolls will automatically appear. If you modify this field at runtime, call refreshRect() to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.listPopupDirection">
            <summary>
            Is used to determine the popup direction of the iGUIDropDownList. Can be changed at runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.emptyText">
            <summary>
            When an unavailable selectedIndex value is set, emptyText is displayed as the text of the drop down list.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.selectedIndex">
            <summary>
            Is used to get or set the value of drop down list.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.options">
            <summary>
            Is used to determine the options to be listed in drop down list. Don't modify this field directly. Instead use addOption(), removeOption() or insertOption() methods.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.listItemDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.scrollBrakeSpeed">
            <summary>
            Is used to determine the brake speed of scrolling after releasing touch. Useless for non-touch devices.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.hideScrollBars">
            <summary>
            Is used to determine whether to show or hide scroll bars
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.style">
            <summary>
            Is used to fine tune the visual appearance of the drop down list. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.listItemStyle">
            <summary>
            Is used to fine tune the visual appearance of the list items. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUIDropDownList.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUIDropDownList.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUIDropDownList.getEventNames-->
        <member name="M:iGUI.iGUIDropDownList.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIDropDownList.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIDropDownList.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIDropDownList.addOption(UnityEngine.GUIContent)">
            <summary>
            Is used to add new options to drop down list at runtime.
            </summary>
            <param name="option">
            A <see cref="T:UnityEngine.GUIContent" /> as the content of the option to create.
            </param>
            <returns>
            A <see cref="T:System.Int32" /> as the index of the newly created option.
            </returns>
        </member>
        <member name="M:iGUI.iGUIDropDownList.addOption(System.String)">
            <summary>
            Is used to add new options to drop down list at runtime.
            </summary>
            <param name="label">
            A <see cref="T:System.String" /> as the text of the option to create.
            </param>
            <returns>
            A <see cref="T:System.Int32" /> as the index of the newly created option.
            </returns>
        </member>
        <member name="M:iGUI.iGUIDropDownList.removeOption(System.Int32)">
            <summary>
            Is used to remove options by index at runtime. If no options at the given index was found, then returns null.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /> to determine the option to remove.
            </param>
            <returns>
            A <see cref="T:UnityEngine.GUIContent" />  which holds the content of removed option.
            </returns>
        </member>
        <member name="M:iGUI.iGUIDropDownList.removeOption(UnityEngine.GUIContent)">
            <summary>
            Is used to remove options at runtime. If no such option found, then returns false.
            </summary>
            <param name="option">
            A <see cref="T:UnityEngine.GUIContent" />. The option to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIDropDownList.removeAll">
            <summary>
            Is used to remove all options of drop down list
            </summary>
        </member>
        <member name="M:iGUI.iGUIDropDownList.insertOption(System.Int32,UnityEngine.GUIContent)">
            <summary>
            Is used to insert an option at a specified index during runtime.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /> to determine the index of the new item.
            </param>
            <param name="option">
            A <see cref="T:UnityEngine.GUIContent" /> to determine the content of new option.
            </param>
        </member>
        <member name="M:iGUI.iGUIDropDownList.insertOption(System.Int32,System.String)">
            <summary>
            Is used to insert an option at a specified index during runtime.
            </summary>
            <param name="index">
            A <see cref="T:System.Int32" /> to determine the index of the new item.
            </param>
            <param name="label">
            A <see cref="T:System.String" /> to determine the text of new option.
            </param>
        </member>
        <member name="M:iGUI.iGUIDropDownList.setDynamicFontSize(System.Single,System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
            <param name="listItemFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="T:iGUI.iGUITabPanel">
            <summary>
            The class which is used to create tab views.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.onTabChange">
            <summary>
            Modifying action lists directly is not suggested.
            But if you need to do so, call initActions(onTabChange) after modifying onTabChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.activePanel">
            <summary>
            Is used to set or get the active panel.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.titles">
            <summary>
            Is used to determine the labels of the tab buttons.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabPosition">
            <summary>
            Is used to get tab control position.
            To modify the tab position in runtime call setTabPosition() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabAlignment">
            <summary>
            Is used to get tab control alignment.
            To modify the tab position in runtime call setTabAlignment() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabVerticalAlignment">
            <summary>
            Is used to get tab control vertical alignment.
            To modify the tab position in runtime call setTabVerticalAlignment() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabButtonSidePadding">
            <summary>
            Is used to get the side padding.
            To modify the side padding in runtime call setSidePadding() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabButtonUpDownPadding">
            <summary>
            Is used to get the up or down padding.
            To modify the up down padding in runtime call setUpDownPadding() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabButtonBetweenPadding">
            <summary>
            Is used to get or set the padding between tab buttons. Call refreshRect() after modifying this field.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabButtonWidth">
            <summary>
            Is used to get or set the width of tab buttons. Can be relative or absolute. If set to zero, default width from corresponding style will be used. Call refreshRect() after modifying this field.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabButtonHeight">
            <summary>
            Is used to get or set the height of tab buttons. Can be relative or absolute. If set to zero, default height from corresponding style will be used. Call refreshRect() after modifying this field.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.autoFixTabButtonHeight">
            <summary>
            Is used to determine whether the tab button height style will be automatically resized to tabButtonHeight.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabBarHeight">
            <summary>
            Is used to get or set the height of tab bar. Can be relative or absolute. If set to zero, default height from corresponding style will be used. Call refreshRect() after modifying this field.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.autoFixBarHeight">
            <summary>
            Is used to determine whether the bar height style will be automatically resized to tabBarHeight.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabType">
            <summary>
            Is used to get tab control buttons type.
            To modify the tab type in runtime call setTabType() method.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.style">
            <summary>
            Is used to fine tune the visual appearance of the tab bar background.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabLeft">
            <summary>
            Is used to fine tune the visual appearance of the tab button at the leftmost.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabCenter">
            <summary>
            Is used to fine tune the visual appearance of the tab buttons not at the right or leftmost.
            </summary>
        </member>
        <member name="F:iGUI.iGUITabPanel.tabRight">
            <summary>
            Is used to fine tune the visual appearance of the tab buttons at the rightmost.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUITabPanel.getEventNames-->
        <member name="M:iGUI.iGUITabPanel.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUITabPanel.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUITabPanel.setTabType(iGUI.iGUITabType)">
            <summary>
            Is used to change the tab type at runtime.
            </summary>
            <param name="tabType">
            A <see cref="T:iGUI.iGUITabType" /> to determine the new type of the tab panel.
            </param>
        </member>
        <member name="M:iGUI.iGUITabPanel.setTabPosition(iGUI.iGUITabPosition)">
            <summary>
            Is used to change the tab buttons position at runtime.
            </summary>
            <param name="tabPosition">
            A <see cref="T:iGUI.iGUITabPosition" /> to determine the new position of tab panel controls.
            </param>
        </member>
        <member name="M:iGUI.iGUITabPanel.setTabAlignment(iGUI.iGUITabAlignment)">
            <summary>
            Is used to change the tab buttons alignment at runtime.
            </summary>
            <param name="tabAlignment">
            A <see cref="T:iGUI.iGUITabAlignment" /> to determine the new position of tab panel controls.
            </param>
        </member>
        <member name="M:iGUI.iGUITabPanel.setTabAlignment(iGUI.iGUITabVerticalAlignment)">
            <summary>
            Is used to change the tab buttons alignment at runtime.
            </summary>
            <param name="tabVerticalAlignment">
            A <see cref="T:iGUI.iGUITabVerticalAlignment" /> to determine the new position of tab panel controls.
            </param>
        </member>
        <member name="M:iGUI.iGUITabPanel.setSidePadding(System.Int32)">
            <summary>
            Is used to change the side padding of tab buttons at runtime.
            </summary>
            <param name="sidePadding">
            A <see cref="T:System.Int32" /> to determine the new side padding of tab panel controls.
            </param>
        </member>
        <member name="M:iGUI.iGUITabPanel.setUpDownPadding(System.Int32)">
            <summary>
            Is used to change the up down padding of tab buttons at runtime.
            </summary>
            <param name="upDownPadding">
            A <see cref="T:System.Int32" /> to determine the new up down padding of tab panel controls.
            </param>
        </member>
        <member name="M:iGUI.iGUITabPanel.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUITabPanel.newPanel(UnityEngine.GUIContent)">
            <summary>
            Is used to add a new panel to the tab panel at runtime.
            </summary>
            <param name="buttonTitle">
            A <see cref="T:UnityEngine.GUIContent" /> to determine the button label content of the new panel to create.
            </param>
            <returns>
            The newly created <see cref="T:iGUI.iGUIPanel" />.
            </returns>
        </member>
        <member name="M:iGUI.iGUITabPanel.newPanel(System.String)">
            <summary>
            Is used to add a new panel to the tab panel at runtime.
            </summary>
            <param name="buttonTitle">
            A <see cref="T:System.String" /> to determine the button label text of the new panel to create.
            </param>
            <returns>
            The newly created <see cref="T:iGUI.iGUIPanel" />.
            </returns>
        </member>
        <member name="M:iGUI.iGUITabPanel.newPanel(System.String,UnityEngine.Texture)">
            <summary>
            Is used to add a new panel to the tab panel at runtime.
            </summary>
            <param name="buttonTitle">
            A <see cref="T:System.String" /> to determine the button label text of the new panel to create.
            </param>
            <param name="icon">
            A <see cref="T:UnityEngine.Texture" /> to determine the button icon of the new panel to create.
            </param>
            <returns>
            The newly created <see cref="T:iGUI.iGUIPanel" />.
            </returns>
        </member>
        <member name="M:iGUI.iGUITabPanel.removePanel(iGUI.iGUIElement)">
            <summary>
            Is used to remove a panel from tab panel at runtime.
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUITabPanel.setDynamicFontSize(System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIBox.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIBox.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="T:iGUI.iGUISlidePanel">
            <summary>
            The class which is used to create a slide view, specialized for touch devices.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.onPanelChange">
            <summary>
            Modifying action lists directly is not suggested.
            But if you need to do so, call initActions(onPanelChange) after modifying onPanelChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.panelChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.padding">
            <summary>
            Is used to restrict the usable area of the slide panel.
            If modified at runtime be sure to call refreshRect() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.itemsMargin">
            <summary>
            Is used to determine the spacing between child panels.
            If modified at runtime be sure to call refreshRect() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.useSeperators">
            <summary>
            Is used to determine whether seperators will be drawn while sliding or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.ignoreDisabledElements">
            <summary>
            Is used to determine, whether disabled elements taken into account when calculating the layout of child elements.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.controlPanelHeight">
            <summary>
            Is used to determine the height of control panel(gray dots by default).
            Changing the value of Control Panel Height also changes the distance between the dots accordingly.
            Control panel can be disabled by setting Control Panel Height value to zero.
            If modified at runtime be sure to call refreshRect() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.controlPanelPosition">
            <summary>
            Is used to determine the position of control panel.
            If modified at runtime be sure to call refreshRect() after modification to apply changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.activePanel">
            <summary>
            Is used to set or get the active panel. To set the active panel at runtime use setActivePanel() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.autoMode">
            <summary>
            Is used to determine whether the slide panel touch interaction will be auto handled and ignore brakeSpeed property.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.autoModeMinPanelSkipVelocity">
            <summary>
            Is used to determine the minimum velocity needed to skip a panel in autoMode.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.brakeSpeed">
            <summary>
            Is used to determine the effect of the swipe gesture
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.snapSpeed">
            <summary>
            Is used to determine the effect of snapping of slide panel
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.slideSpeed">
            <summary>
            Is used to determine the panel sliding speed by touch.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.isLocked">
            <summary>
            Is used to lock/release slide panel.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.customSelectedControlIcons">
            <summary>
            The custom control icons for the slide panel. The textures will be used in selected style. Assigning custom control icons is optional.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.customNonSelectedControlIcons">
            <summary>
            The custom control icons for the slide panel. The textures will be used in non selected styles Assigning custom control icons is optional.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.seperatorStyle">
            <summary>
            Is used to fine tune the visual appearance of the separator bar.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.selectedStyle">
            <summary>
            Is used to fine tune the visual appearance of the active dots at the control panel.
            </summary>
        </member>
        <member name="F:iGUI.iGUISlidePanel.nonSelectedStyle">
            <summary>
            Is used to fine tune the visual appearance of the passive dots at the control panel.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUISlidePanel.getEventNames-->
        <member name="M:iGUI.iGUISlidePanel.setActivePanel(System.Int32)">
            <summary>
            Is used to set the active panel at runtime.
            </summary>
            <param name="activePanel">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iGUI.iGUISlidePanel.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUISlidePanel.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUISlidePanel.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUISlidePanel.newPanel">
            <summary>
            Is used to add a new panel to the slide panel at runtime.
            </summary>
            <returns>
            The newly created <see cref="T:iGUI.iGUIPanel" />.
            </returns>
        </member>
        <member name="M:iGUI.iGUISlidePanel.removePanel(iGUI.iGUIElement)">
            <summary>
            Is used to remove a panel from slide panel at runtime.
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="T:iGUI.iGUIPanel">
            <summary>
            The class which is used to create panels.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPanel.type">
            <summary>
            Type property only effects the visual appearance of the panel. As of version 1.06 there are two types of panel in iGUI. To change the type of a panel during runtime please use setType() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPanel.autoPadding">
            <summary>
            Is used to determine whether padding will be auto calculated when the skin changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPanel.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUIPanel.style">
            <summary>
            Is used to fine tune the visual appearance of the panel. Can be modified during runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPanel.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPanel.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPanel.setCustomStyle(System.String)">
            <summary>
            Is used to assign a custom style at runtime.
            </summary>
            <param name="name">
            Style Name.
            </param>
        </member>
        <member name="M:iGUI.iGUIPanel.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIPanel.setType(iGUI.iGUIPanelType)">
            <summary>
            Type property only effects the visual appearance of the panel. This method is used to change the type of a panel during runtime.
            </summary>
            <param name="type">
            A <see cref="T:iGUI.iGUIPanelType" /></param>
        </member>
        <member name="M:iGUI.iGUIPanel.setDynamicFontSize(System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="F:iGUI.iGUINumberField.onFocus">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onFocus) after modifying onFocus array.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.onBlur">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onBlur) after modifying onBlur array.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.onEnterKey">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onEnterKey) after modifying onEnterKey array.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.onTabKey">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onTabKey) after modifying onTabKey array.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.onValueChange">
            <summary>
            Modifying action lists directly is not suggested. But if you need to do so, call initActions(onValueChange) after modifying onValueChange array.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.focusCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUINumberField.blurCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUINumberField.enterKeyCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUINumberField.tabKeyCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUINumberField.valueChangeCallback">
            <summary>
            You can bind callback methods to events. If you have a method with signature void myMethod(iGUIElement caller), you can bind myMethod to mouseOver event of button1 with either:
            <c>button1.mouseOverCallback = myMethod;</c>
            or you can bind as many methods as you want by the following syntax :
            <c>button1.mouseOverCallback += myMethod;</c></summary>
        </member>
        <member name="F:iGUI.iGUINumberField.labelWidth">
            <summary>
            Don't modify this field directly. Use setLabelWidth() instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.readOnly">
            <summary>
            Is used to determine if the field's value is allowed to change or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.value">
            <summary>
            Is used to get or set the value of the number field
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.maxLength">
            <summary>
            Is used to limit maximum number of characters allowed. To allow any number of characters just give a negative value.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.maxValue">
            <summary>
            Maximum allowed value for this number field. Inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.minValue">
            <summary>
            Minimum allowed value for this number field. Inclusive.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.allowDecimals">
            <summary>
            Is used to determine whether decimals will be allowed or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.format">
            <summary>
            Format of the number showing in numberfield.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.decimalSeparator">
            <summary>
            The decimal separator.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.thousandSeparator">
            <summary>
            The thousand separator.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.labelDynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.dynamicFontSize">
            <summary>
            Is used to override default fontsize, relative to the element's height at runtime. Don't modify this field directly. Use setDynamicFontSize() method instead.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.style">
            <summary>
            Is used to fine tune the visual appearance of textfield. Can be modified during runtime.
            </summary>
        </member>
        <member name="F:iGUI.iGUINumberField.labelStyle">
            <summary>
            Is used to fine tune the visual appearance of field label. Can be modified during runtime.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iGUI.iGUINumberField.getEventNames-->
        <member name="M:iGUI.iGUINumberField.setLabelWidth(System.Single)">
            <summary>
            Is used to modify the field label width during runtime.
            </summary>
            <param name="labelWidth">
            A <see cref="T:System.Single" /> as the width of the field label.
            </param>
        </member>
        <member name="M:iGUI.iGUINumberField.refreshStyle">
            <summary>
            Is called internally when needed. Can be called manually if needed after style or type changes but not suggested.
            </summary>
        </member>
        <member name="M:iGUI.iGUINumberField.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUINumberField.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUINumberField.focus">
            <summary>
            Is used to move cursor to textfield by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUINumberField.unFocus">
            <summary>
            Is used to remove cursor from textfield by code.
            </summary>
        </member>
        <member name="M:iGUI.iGUINumberField.hasFocus">
            <summary>
            Checks whether the field has focus or not.
            </summary>
            <returns>
            A <see cref="T:System.Boolean" /></returns>
        </member>
        <member name="M:iGUI.iGUINumberField.setDynamicFontSize(System.Single,System.Single)">
            <summary>
            Is used to set the dynamic font size at runtime
            </summary>
            <param name="labelFontSize">
            A <see cref="T:System.Single" /></param>
            <param name="fontSize">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUINumberField.setValue(System.Single)">
            <summary>
            Is used to set value of the field and triggering Value Changed event.
            </summary>
            <param name="value">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUINumberField.getHighlightedText">
            <summary>
            Is used to get the highlighted text in the field. If field doesn't have focus, returns empty string.
            </summary>
            <returns>
            A <see cref="T:System.String" /></returns>
        </member>
        <member name="M:iGUI.iGUINumberField.selectAll">
            <summary>
            Selects all field content if the field has focus.
            </summary>
            <returns>
            Returns true if text is selected successfully.
            </returns>
        </member>
        <member name="F:iGUI.iGUIListBox.reverseOrder">
            <summary>
            Is used to reverse the layout order of items. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.direction">
            <summary>
            Is used to determine the layout direction of items. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.ignoreDisabledElements">
            <summary>
            Is used to determine, whether disabled elements taken into account when calculating the layout of child elements.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.padding">
            <summary>
            Is used restrict the usable area of a container. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.itemsMargin">
            <summary>
            Is used determine the spacing between child elements. If you need to modify this field in runtime, call refreshRect() after modifying to apply the changes.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.scrollPosition">
            <summary>
            Is used to set or get the position of the leftmost top point of the usable area's currently viewable portion, in pixels.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.brakeSpeed">
            <summary>
            Is used to determine the brake speed of scrolling after releasing touch. Useless for non-touch devices.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.isLocked">
            <summary>
            Is used to lock/release listbox.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.hideScrollBars">
            <summary>
            Is used to determine whether to show or hide scroll bars
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.ignoreScrollBars">
            <summary>
            Is used to determine whether scrollbar inputs will be ignored or not
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.bounceEffect">
            <summary>
            Is used to determine whether bounce effect will be enabled or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.steppedScrolling">
            <summary>
            Is used to determine whether stepped scrolling effect will be enabled or not.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.stepSnapTime">
            <summary>
            The smoothing snap time of stepped scrolling.
            </summary>
        </member>
        <member name="F:iGUI.iGUIListBox.dragDeadZone">
            <summary>
            Is used to determine minimum pixels that a finger has to travel before activate scrolling.
            </summary>
        </member>
        <member name="P:iGUI.iGUIListBox.focusedItemIndexOfSteppedScrolling">
            <summary>
            Gets the index of the nearest item .
            </summary>
            <value>The index of the nearest.</value>
        </member>
        <member name="M:iGUI.iGUIListBox.addSmartObject(System.String)">
            <summary>
            Is used to create and add an instance of smart object with the given name.
            </summary>
            <param name="smartObjectName">
            A <see cref="T:System.String" /> as the name of smartobject file.
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIElement" /> which is the root of smart object and has the iGUISmartObject component.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1(System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1(System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1(UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1(System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement``1(System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String,System.Int32,System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String,System.Int32)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String,System.Int32,System.String,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified name, prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="name">
            A <see cref="T:System.String" /> to determine the name of newly created gameobject that will represent the element.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElement(System.String,System.Int32,UnityEngine.Rect)">
            <summary>
            Is used to add elements or containers into this container at runtime with a specified prefix number and positionAndSize value.
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <param name="order">
            A <see cref="T:System.Int32" /> to determine the prefix number in the name of the gameobject. Also affects the order of the element to be created if container's layout is other than Free.
            </param>
            <param name="positionAndSize">
            A <see cref="T:UnityEngine.Rect" /> to determine the positioning and sizing of the element to create, either relative or absolute.
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElementSilent``1">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations.
            </summary>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addElementSilent(System.String)">
            <summary>
            Is used to add elements or containers into this container at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="elementTypeName">
            A <see cref="T:System.String" />. For example "iGUIPanel".
            </param>
            <returns>
            Returns the newly created element or container.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.addSmartObjectSilent(System.String)">
            <summary>
            Is used to create and add an instance of smart object with the given name but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="smartObjectName">
            A <see cref="T:System.String" /> as the name of smartobject file.
            </param>
            <returns>
            A <see cref="T:iGUI.iGUIElement" /> which is the root of smart object and has the iGUISmartObject component.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.removeElementSilent(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime but without recalculating parent layout.
            You have to call container.refreshRect() manually. Useful for batch element creations
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.removeElement(iGUI.iGUIElement)">
            <summary>
            Is used to remove an element at runtime.
            </summary>
            <param name="element">
            A <see cref="T:iGUI.iGUIElement" />. The element to remove.
            </param>
            <returns>
            A <see cref="T:System.Boolean" />. Returns true if found and removed.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.removeAll">
            <summary>
            Is used to remove all elements in this container at runtime.
            </summary>
        </member>
        <member name="M:iGUI.iGUIListBox.refreshRect">
            <summary>
            Is called internally. Can be used to force an element to recalculate its own and its children's rect.
            </summary>
        </member>
        <member name="M:iGUI.iGUIListBox.onCreate">
            <summary>
            Normally called when a variableName is assigned for the first time. You can call manually when you need to refresh the GUIStyles from the GUISkin in root.
            </summary>
        </member>
        <member name="M:iGUI.iGUIListBox.positionToChildOrder(UnityEngine.Vector2)">
            <summary>
            Calculates the child order for a position given in screen space.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Vector2" /> given in screen space.
            </param>
            <returns>
            A <see cref="T:System.Int32" /> as order.
            </returns>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToBottom">
            <summary>
            Is used to scroll to bottom with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToBottom(System.Single)">
            <summary>
            Is used to scroll to bottom with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToRight">
            <summary>
            Is used to scroll to right with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToRight(System.Single)">
            <summary>
            Is used to scroll to right with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToTop">
            <summary>
            Is used to scroll to top with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToTop(System.Single)">
            <summary>
            Is used to scroll to top with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToLeft">
            <summary>
            Is used to scroll to left with a smooth animation
            </summary>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToLeft(System.Single)">
            <summary>
            Is used to scroll to left with a smooth animation
            </summary>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollTo(UnityEngine.Vector2)">
            <summary>
            Is used to scroll to target with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollTo(UnityEngine.Vector2,System.Single)">
            <summary>
            Is used to scroll to target with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToVertical(System.Single,System.Single)">
            <summary>
            Is used to scroll to target vertical position with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:System.Single" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIListBox.scrollToHorizontal(System.Single,System.Single)">
            <summary>
            Is used to scroll to target horizontal position with a smooth animation
            </summary>
            <param name="targetPosition">
            A <see cref="T:System.Single" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> indicates the duration of the animation
            </param>
        </member>
        <member name="M:iGUI.iGUIListBox.setVerticalScrollPosition(System.Single)">
            <summary>
            Is used to set vertical scroll position
            </summary>
            <param name="newPosition">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIListBox.setHorizontalScrollPosition(System.Single)">
            <summary>
            Is used to set horizontal scroll position
            </summary>
            <param name="newPosition">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iGUI.iGUIListBox.setScrollPosition(UnityEngine.Vector2)">
            <summary>
            Is used to set scroll position
            </summary>
            <param name="newPosition">
            A <see cref="T:UnityEngine.Vector2" /></param>
        </member>
        <member name="T:iTweeniGUI">
            <summary>
                <para>Version: 2.0.45</para>
                <para>Author: Bob Berkebile (http://pixelplacement.com)</para>
                <para>Support: http://itween.pixelplacement.com</para>
            </summary>
        </member>
        <member name="T:iTweeniGUI.EaseType">
            <summary>
            The type of easing to use based on Robert Penner's open source easing equations (http://www.robertpenner.com/easing_terms_of_use.html).
            </summary>
        </member>
        <member name="T:iTweeniGUI.LoopType">
            <summary>
            The type of loop (if any) to use.
            </summary>
        </member>
        <member name="F:iTweeniGUI.LoopType.none">
            <summary>
            Do not loop.
            </summary>
        </member>
        <member name="F:iTweeniGUI.LoopType.loop">
            <summary>
            Rewind and replay.
            </summary>
        </member>
        <member name="F:iTweeniGUI.LoopType.pingPong">
            <summary>
            Ping pong the animation back and forth.
            </summary>
        </member>
        <member name="T:iTweeniGUI.NamedValueColor">
            <summary>
            Many shaders use more than one color. Use can have iTweeniGUI's Color methods operate on them by name.
            </summary>
        </member>
        <member name="F:iTweeniGUI.NamedValueColor._Color">
            <summary>
            The main color of a material. Used by default and not required for Color methods to work in iTweeniGUI.
            </summary>
        </member>
        <member name="F:iTweeniGUI.NamedValueColor._SpecColor">
            <summary>
            The specular color of a material (used in specular/glossy/vertexlit shaders).
            </summary>
        </member>
        <member name="F:iTweeniGUI.NamedValueColor._Emission">
            <summary>
            The emissive color of a material (used in vertexlit shaders).
            </summary>
        </member>
        <member name="F:iTweeniGUI.NamedValueColor._ReflectColor">
            <summary>
            The reflection color of the material (used in reflective shaders).
            </summary>
        </member>
        <member name="T:iTweeniGUI.Defaults">
            <summary>
            A collection of baseline presets that iTweeniGUI needs and utilizes if certain parameters are not provided.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Init(UnityEngine.GameObject)">
            <summary>
            Sets up a GameObject to avoid hiccups when an initial iTweeniGUI is added. It's advisable to run this on every object you intend to run iTweeniGUI on in its Start or Awake.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target to be initialized for iTweeniGUI.
            </param>
        </member>
        <member name="M:iTweeniGUI.CameraFadeFrom(System.Single,System.Single)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.CameraFadeFrom(System.Collections.Hashtable)">
            <summary>
            Instantly changes the amount(transparency) of a camera fade and then returns it back over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.CameraFadeTo(System.Single,System.Single)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with MINIMUM customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.CameraFadeTo(System.Collections.Hashtable)">
            <summary>
            Changes the amount(transparency) of a camera fade over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for how transparent the Texture2D that the camera fade uses is.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ValueTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Returns a value to an 'oncallback' method interpolated between the supplied 'from' and 'to' values for application as desired.  Requires an 'onupdate' callback that accepts the same type as the supplied 'from' and 'to' properties.
            </summary>
            <param name="from">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> or <see cref="T:UnityEngine.Vector3" /> or <see cref="T:UnityEngine.Vector2" /> or <see cref="T:UnityEngine.Color" /> or <see cref="T:UnityEngine.Rect" /> for the starting value.
            </param>
            <param name="to">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> or <see cref="T:UnityEngine.Vector3" /> or <see cref="T:UnityEngine.Vector2" /> or <see cref="T:UnityEngine.Color" /> or <see cref="T:UnityEngine.Rect" /> for the ending value.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed (only works with Vector2, Vector3, and Floats)
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.FadeFrom(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single" /> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.FadeFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value instantly then returns it to the provided alpha over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorFrom and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the initial alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the initial alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean" /> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.FadeTo(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Changes a GameObject's alpha value over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single" /> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.FadeTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's alpha value over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation. Identical to using ColorTo and using the "a" parameter.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the final alpha value of the animation.
            </param>
            <param name="amount">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean" /> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ColorFrom(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ColorFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values instantly then returns them to the provided properties over time with FULL customization options.  If a GUIText or GUITexture component is attached, it will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the alpha.
            </param>
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue" /> or <see cref="T:System.String" /> for the individual setting of the alpha.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean" /> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ColorTo(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Changes a GameObject's color values over time with MINIMUM customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ColorTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's color values over time with FULL customization options.  If a GUIText or GUITexture component is attached, they will become the target of the animation.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the alpha.
            </param>
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue" /> or <see cref="T:System.String" /> for the individual setting of the alpha.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean" /> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.AudioFrom(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with MINIMUM customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single" /></param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.AudioFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes an AudioSource's volume and pitch then returns it to it's starting volume and pitch over time with FULL customization options. Default AudioSource attached to GameObject will be used (if one exists) if not supplied.
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource" /> for which AudioSource to use.
            </param>
            <param name="volume">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.AudioTo(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Fades volume and pitch of an AudioSource with MINIMUM customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation which holds the AudioSource to be changed.
            </param>
            <param name="volume"> for the target level of volume.
            A <see cref="T:System.Single" /></param>
            <param name="pitch"> for the target pitch.
            A <see cref="T:System.Single" /></param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.AudioTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Fades volume and pitch of an AudioSource with FULL customization options.  Default AudioSource attached to GameObject will be used (if one exists) if not supplied.
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource" /> for which AudioSource to use.
            </param>
            <param name="volume">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.Stab(UnityEngine.GameObject,UnityEngine.AudioClip,System.Single)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with MINIMUM customization options. AudioSource is optional as iTweeniGUI will provide one.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation which holds the AudioSource to be utilized.
            </param>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip" /> for a reference to the AudioClip to be played.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> for the time in seconds the action will wait before beginning.
            </param>
        </member>
        <member name="M:iTweeniGUI.Stab(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Plays an AudioClip once based on supplied volume and pitch and following any delay with FULL customization options. AudioSource is optional as iTweeniGUI will provide one.
            </summary>
            <param name="audioclip">
            A <see cref="T:UnityEngine.AudioClip" /> for a reference to the AudioClip to be played.
            </param>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource" /> for which AudioSource to use
            </param>
            <param name="volume">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target pitch.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the action will wait before beginning.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.LookFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly rotates a GameObject to look at the supplied Vector3 then returns it to it's starting rotation over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.LookFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly rotates a GameObject to look at a supplied Transform or Vector3 then returns it to it's starting rotation over time with FULL customization options.
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String" />. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.LookTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to look at the supplied Vector3 over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> to be the Vector3 that the target will look towards.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.LookTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to look at a supplied Transform or Vector3 over time with FULL customization options.
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String" />. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3" /> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's position over time to a supplied destination with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /> or <see cref="T:UnityEngine.Vector3[]" /> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean" /> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean" /> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> or A <see cref="T:UnityEngine.Transform" /> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="axis">
            A <see cref="T:System.String" />. Restricts rotation to the supplied axis only.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3" /> for the destination Vector3.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's position to a supplied destination then returns it to it's starting position over time with FULL customization options.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for a point in space the GameObject will animate to.
            </param>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /> or <see cref="T:UnityEngine.Vector3[]" /> for a list of points to draw a Catmull-Rom through for a curved animation path.
            </param>
            <param name="movetopath">
            A <see cref="T:System.Boolean" /> for whether to automatically generate a curve from the GameObject's current position to the beginning of the path. True by default.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean" /> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> or A <see cref="T:UnityEngine.Transform" /> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="lookahead">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for how much of a percentage to look ahead on a path to influence how strict "orientopath" is.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Translates a GameObject's position over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Translates a GameObject's position over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean" /> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> or A <see cref="T:UnityEngine.Transform" /> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String" />. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space" /> or <see cref="T:System.String" /> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds the supplied coordinates to a GameObject's postion with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of change in position to move the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds the supplied coordinates to a GameObject's position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of change in position to move the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean" /> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> or A <see cref="T:UnityEngine.Transform" /> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String" />. Restricts rotation to the supplied axis only.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space" /> or <see cref="T:System.String" /> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Changes a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3" /> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Changes a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3" /> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's scale then returns it to it's starting scale over time with FULL customization options.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of scale to be added to the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds to a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount to be added to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies a GameObject's scale over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of scale to be multiplied by the GameObject's current scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies a GameObject's scale over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount to be multiplied to the GameObject's current scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateTo(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3" /> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateTo(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Rotates a GameObject to the supplied Euler angles in degrees over time with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateFrom(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3" /> for the target Euler angles in degrees to rotate from.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateFrom(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Instantly changes a GameObject's Euler angles in degrees then returns it to it's starting rotation over time (if allowed) with FULL customization options.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateAdd(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateAdd(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Adds supplied Euler angles in degrees to a GameObject's rotation over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount of Euler angles in degrees to add to the current rotation of the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space" /> or <see cref="T:System.String" /> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateBy(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateBy(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Multiplies supplied values by 360 and rotates a GameObject by calculated amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the amount to be multiplied by 360 to rotate the GameObject.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space" /> or <see cref="T:System.String" /> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> can be used instead of time to allow animation based on speed
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="easetype">
            A <see cref="T:iTweeniGUI.EaseType" /> or <see cref="T:System.String" /> for the shape of the easing curve applied to the animation.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed.
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ShakePosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ShakePosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's position by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z magnitude.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean" /> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> or A <see cref="T:UnityEngine.Transform" /> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ShakeScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ShakeScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's scale by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.ShakeRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ShakeRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Randomly shakes a GameObject's rotation by a diminishing amount over time with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space" /> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed. (only "loop" is allowed with shakes)
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.PunchPosition(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.PunchPosition(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's position and wobbles it back to its initial position with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space" /> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> or A <see cref="T:UnityEngine.Transform" /> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the object will take to look at either the "looktarget".
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.PunchRotation(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.PunchRotation(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's rotation and wobbles it back to its initial rotation with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z magnitude.
            </param>
            <param name="space">
            A <see cref="T:UnityEngine.Space" /> for applying the transformation in either the world coordinate or local cordinate system. Defaults to local space.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <member name="M:iTweeniGUI.PunchScale(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with MINIMUM customization options.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of the punch.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.PunchScale(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Applies a jolt of force to a GameObject's scale and wobbles it back to its initial scale with FULL customization options.
            </summary>
            <param name="amount">
            A <see cref="T:UnityEngine.Vector3" /> for the magnitude of shake.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x magnitude.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y magnitude.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z magnitude.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="delay">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will wait before beginning.
            </param>
            <param name="looptype">
            A <see cref="T:iTweeniGUI.LoopType" /> or <see cref="T:System.String" /> for the type of loop to apply once the animation has completed. (only "loop" is allowed with punches)
            </param>
            <param name="onstart">
            A <see cref="T:System.String" /> for the name of a function to launch at the beginning of the animation.
            </param>
            <param name="onstarttarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onstart" method.
            </param>
            <param name="onstartparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onstart" method.
            </param>
            <param name="onupdate">
            A <see cref="T:System.String" /> for the name of a function to launch on every step of the animation.
            </param>
            <param name="onupdatetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "onupdate" method.
            </param>
            <param name="onupdateparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "onupdate" method.
            </param>
            <param name="oncomplete">
            A <see cref="T:System.String" /> for the name of a function to launch at the end of the animation.
            </param>
            <param name="oncompletetarget">
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the GameObject that holds the "oncomplete" method.
            </param>
            <param name="oncompleteparams">
            A <see cref="T:System.Object" /> for arguments to be sent to the "oncomplete" method.
            </param>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.RectUpdate(UnityEngine.Rect,UnityEngine.Rect,System.Single)-->
        <member name="M:iTweeniGUI.Vector3Update(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
            <summary>
            Returns a Vector3 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector3" /></returns>
            <param name="currentValue">
            A <see cref="T:UnityEngine.Vector3" /> the starting or initial value
            </param>
            <param name="targetValue">
            A <see cref="T:UnityEngine.Vector3" /> the target value that the current value will be eased to.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTweeniGUI.Vector2Update(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
            <summary>
            Returns a Vector2 that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.Vector2" /></returns>
            <param name="currentValue">
            A <see cref="T:UnityEngine.Vector2" /> the starting or initial value
            </param>
            <param name="targetValue">
            A <see cref="T:UnityEngine.Vector2" /> the target value that the current value will be eased to.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTweeniGUI.FloatUpdate(System.Single,System.Single,System.Single)">
            <summary>
            Returns a float that is eased between a current and target value by the supplied speed.
            </summary>
            <returns>
            A <see cref="T:System.Single" /></returns>
            <param name="currentValue">
            A <see cref="T:System.Single" /> the starting or initial value
            </param>
            <param name="targetValue">
            A <see cref="T:System.Single" /> the target value that the current value will be eased to.
            </param>
            <param name="speed">
            A <see cref="T:System.Single" /> to be used as rate of speed (larger number equals faster animation)
            </param>
        </member>
        <member name="M:iTweeniGUI.FadeUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType.
            </summary>
            <param name="alpha">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the final alpha value of the animation.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean" /> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.FadeUpdate(UnityEngine.GameObject,System.Single,System.Single)">
            <summary>
            Similar to FadeTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="alpha">
            A <see cref="T:System.Single" /> for the final alpha value of the animation.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ColorUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType.
            </summary>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /> to change the GameObject's color to.
            </param>
            <param name="r">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color red.
            </param>
            <param name="g">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color green.
            </param>
            <param name="b">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the color green.
            </param>
            <param name="a">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the alpha.
            </param>
            <param name="namedcolorvalue">
            A <see cref="!:NamedColorValue" /> or <see cref="T:System.String" /> for the individual setting of the alpha.
            </param>
            <param name="includechildren">
            A <see cref="T:System.Boolean" /> for whether or not to include children of this GameObject. True by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ColorUpdate(UnityEngine.GameObject,UnityEngine.Color,System.Single)">
            <summary>
            Similar to ColorTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /> to change the GameObject's color to.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.AudioUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType.
            </summary>
            <param name="audiosource">
            A <see cref="T:UnityEngine.AudioSource" /> for which AudioSource to use.
            </param>
            <param name="volume">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.AudioUpdate(UnityEngine.GameObject,System.Single,System.Single,System.Single)">
            <summary>
            Similar to AudioTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="volume">
            A <see cref="T:System.Single" /> for the target level of volume.
            </param>
            <param name="pitch">
            A <see cref="T:System.Single" /> for the target pitch.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType.
            </summary>
            <param name="rotation">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.RotateUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to RotateTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="rotation">
            A <see cref="T:UnityEngine.Vector3" /> for the target Euler angles in degrees to rotate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options.  Does not utilize an EaseType.
            </summary>
            <param name="scale">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for the final scale.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.ScaleUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to ScaleTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options.  Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="scale">
            A <see cref="T:UnityEngine.Vector3" /> for the final scale.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType.
            </summary>
            <param name="position">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for a point in space the GameObject will animate to.
            </param>
            <param name="x">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the x axis.
            </param>
            <param name="y">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the y axis.
            </param>
            <param name="z">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the individual setting of the z axis.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
            <param name="islocal">
            A <see cref="T:System.Boolean" /> for whether to animate in world space or relative to the parent. False by default.
            </param>
            <param name="orienttopath">
            A <see cref="T:System.Boolean" /> for whether or not the GameObject will orient to its direction of travel.  False by default.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> or A <see cref="T:UnityEngine.Transform" /> for a target the GameObject will look at.
            </param>
            <param name="looktime">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the object will take to look at either the "looktarget" or "orienttopath".
            </param>
            <param name="axis">
            A <see cref="T:System.String" />. Restricts rotation to the supplied axis only.
            </param>
        </member>
        <member name="M:iTweeniGUI.MoveUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to MoveTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with MINIMUM customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="position">
            A <see cref="T:UnityEngine.Vector3" /> for a point in space the GameObject will animate to.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.LookUpdate(UnityEngine.GameObject,System.Collections.Hashtable)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType.
            </summary>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Transform" /> or <see cref="T:UnityEngine.Vector3" /> for a target the GameObject will look at.
            </param>
            <param name="axis">
            A <see cref="T:System.String" />. Restricts rotation to the supplied axis only.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> or <see cref="T:System.Double" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.LookUpdate(UnityEngine.GameObject,UnityEngine.Vector3,System.Single)">
            <summary>
            Similar to LookTo but incredibly less expensive for usage inside the Update function or similar looping situations involving a "live" set of changing values with FULL customization options. Does not utilize an EaseType.
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /> to be the target of the animation.
            </param>
            <param name="looktarget">
            A <see cref="T:UnityEngine.Vector3" /> for a target the GameObject will look at.
            </param>
            <param name="time">
            A <see cref="T:System.Single" /> for the time in seconds the animation will take to complete.
            </param>
        </member>
        <member name="M:iTweeniGUI.PathLength(UnityEngine.Transform[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Transforms.
            </summary>
            <returns>
            A <see cref="T:System.Single" /></returns>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
        </member>
        <member name="M:iTweeniGUI.PathLength(UnityEngine.Vector3[])">
            <summary>
            Returns the length of a curved path drawn through the provided array of Vector3s.
            </summary>
            <returns>
            The length.
            </returns>
            <param name="path">
            A <see cref="T:UnityEngine.Vector3[]" /></param>
        </member>
        <member name="M:iTweeniGUI.CameraTexture(UnityEngine.Color)">
            <summary>
            Creates and returns a full-screen Texture2D for use with CameraFade.
            </summary>
            <returns>
            Texture2D
            </returns>
            <param name="color">
            Color
            </param>
        </member>
        <member name="M:iTweeniGUI.PutOnPath(UnityEngine.GameObject,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /></param>
            <param name="path">
            A <see cref="T:UnityEngine.Vector3[]" /></param>
            <param name="percent">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iTweeniGUI.PutOnPath(UnityEngine.Transform,UnityEngine.Vector3[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform" /></param>
            <param name="path">
            A <see cref="T:UnityEngine.Vector3[]" /></param>
            <param name="percent">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iTweeniGUI.PutOnPath(UnityEngine.GameObject,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.GameObject" /></param>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="percent">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iTweeniGUI.PutOnPath(UnityEngine.Transform,UnityEngine.Transform[],System.Single)">
            <summary>
            Puts a GameObject on a path at the provided percentage
            </summary>
            <param name="target">
            A <see cref="T:UnityEngine.Transform" /></param>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="percent">
            A <see cref="T:System.Single" /></param>
        </member>
        <member name="M:iTweeniGUI.PointOnPath(UnityEngine.Transform[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="percent">
            A <see cref="T:System.Single" /></param>
            <returns>
            A <see cref="T:UnityEngine.Vector3" /></returns>
        </member>
        <member name="M:iTweeniGUI.DrawLine(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLine(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Vector3s.
            </summary>
            <param name="line">
            A <see cref="!:Vector3s" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLine(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="T:UnityEngine.Transform[]" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLine(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a line through the provided array of Transforms.
            </summary>
            <param name="line">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="T:UnityEngine.Transform[]" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="line">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="!:Vector3s" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineHandles(UnityEngine.Transform[])">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="T:UnityEngine.Transform[]" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawLineHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a line through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="line">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.PointOnPath(UnityEngine.Vector3[],System.Single)">
            <summary>
            Returns a Vector3 position on a path at the provided percentage
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Vector3[]" /></param>
            <param name="percent">
            A <see cref="T:System.Single" /></param>
            <returns>
            A <see cref="T:UnityEngine.Vector3" /></returns>
        </member>
        <member name="M:iTweeniGUI.DrawPath(UnityEngine.Vector3[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPath(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Vector3s.
            </summary>
            <param name="path">
            A <see cref="!:Vector3s" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPath(UnityEngine.Transform[])">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPath(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            When called from an OnDrawGizmos() function it will draw a curved path through the provided array of Transforms.
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathGizmos(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathGizmos(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathGizmos(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathGizmos(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Gizmos.DrawLine().
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathHandles(UnityEngine.Vector3[])">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathHandles(UnityEngine.Vector3[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Vector3s with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="!:Vector3s" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathHandles(UnityEngine.Transform[])">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
        </member>
        <member name="M:iTweeniGUI.DrawPathHandles(UnityEngine.Transform[],UnityEngine.Color)">
            <summary>
            Draws a curved path through the provided array of Transforms with Handles.DrawLine().
            </summary>
            <param name="path">
            A <see cref="T:UnityEngine.Transform[]" /></param>
            <param name="color">
            A <see cref="T:UnityEngine.Color" /></param>
        </member>
        <member name="M:iTweeniGUI.CameraFadeDepth(System.Int32)">
            <summary>
            Changes a camera fade's texture.
            </summary>
            <param name="depth">
            A <see cref="T:System.Int32" /></param>
        </member>
        <member name="M:iTweeniGUI.CameraFadeDestroy">
            <summary>
            Removes and destroyes a camera fade.
            </summary>
        </member>
        <member name="M:iTweeniGUI.CameraFadeSwap(UnityEngine.Texture2D)">
            <summary>
            Changes a camera fade's texture.
            </summary>
            <param name="texture">
            A <see cref="T:UnityEngine.Texture2D" /></param>
        </member>
        <member name="M:iTweeniGUI.CameraFadeAdd(UnityEngine.Texture2D,System.Int32)">
            <summary>
            Creates a GameObject (if it doesn't exist) at the supplied depth that can be used to simulate a camera fade.
            </summary>
            <param name="texture">
            A <see cref="T:UnityEngine.Texture2D" /></param>
            <param name="depth">
            A <see cref="T:System.Int32" /></param>
            <returns>
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTweeniGUI.CameraFadeAdd(UnityEngine.Texture2D)">
            <summary>
            Creates a GameObject (if it doesn't exist) at the default depth that can be used to simulate a camera fade.
            </summary>
            <param name="texture">
            A <see cref="T:UnityEngine.Texture2D" /></param>
            <returns>
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTweeniGUI.CameraFadeAdd">
            <summary>
            Creates a GameObject (if it doesn't exist) at the default depth filled with black that can be used to simulate a camera fade.
            </summary>
            <returns>
            A <see cref="T:UnityEngine.GameObject" /> for a reference to the CameraFade.
            </returns>
        </member>
        <member name="M:iTweeniGUI.Resume(UnityEngine.GameObject)">
            <summary>
            Resume all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Resume(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Resume all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.Resume(UnityEngine.GameObject,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.Resume(UnityEngine.GameObject,System.String,System.Boolean)-->
        <member name="M:iTweeniGUI.Resume">
            <summary>
            Resume all iTweens in scene.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Resume(System.String)">
            <summary>
            Resume all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String" /> name of the type of iTweeniGUI you would like to resume.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>
        </member>
        <member name="M:iTweeniGUI.Pause(UnityEngine.GameObject)">
            <summary>
            Pause all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Pause(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Pause all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.Pause(UnityEngine.GameObject,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.Pause(UnityEngine.GameObject,System.String,System.Boolean)-->
        <member name="M:iTweeniGUI.Pause">
            <summary>
            Pause all iTweens in scene.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Pause(System.String)">
            <summary>
            Pause all iTweens in scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String" /> name of the type of iTweeniGUI you would like to pause.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>
        </member>
        <member name="M:iTweeniGUI.Count">
            <summary>
            Count all iTweens in current scene.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Count(System.String)">
            <summary>
            Count all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String" /> name of the type of iTweeniGUI you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>
        </member>
        <member name="M:iTweeniGUI.Count(UnityEngine.GameObject)">
            <summary>
            Count all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Count(UnityEngine.GameObject,System.String)">
            <summary>
            Count all iTweens on a GameObject of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String" /> name of the type of iTweeniGUI you would like to count.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>
        </member>
        <member name="M:iTweeniGUI.Stop">
            <summary>
            Stop and destroy all Tweens in current scene.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Stop(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular type.
            </summary>
            <param name="type">
            A <see cref="T:System.String" /> name of the type of iTweeniGUI you would like to stop.  Can be written as part of a name such as "mov" for all "MoveTo" iTweens.
            </param>
        </member>
        <member name="M:iTweeniGUI.StopByName(System.String)">
            <summary>
            Stop and destroy all iTweens in current scene of a particular name.
            </summary>
            <param name="name">
            The <see cref="T:System.String" /> name of iTweeniGUI you would like to stop.
            </param>
        </member>
        <member name="M:iTweeniGUI.Stop(UnityEngine.GameObject)">
            <summary>
            Stop and destroy all iTweens on a GameObject.
            </summary>
        </member>
        <member name="M:iTweeniGUI.Stop(UnityEngine.GameObject,System.Boolean)">
            <summary>
            Stop and destroy all iTweens on a GameObject including its children.
            </summary>
        </member>
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.Stop(UnityEngine.GameObject,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.StopByName(UnityEngine.GameObject,System.String)-->
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.Stop(UnityEngine.GameObject,System.String,System.Boolean)-->
        <!--FIXME: Invalid documentation markup was found for member M:iTweeniGUI.StopByName(UnityEngine.GameObject,System.String,System.Boolean)-->
        <member name="M:iTweeniGUI.Hash(System.Object[])">
            <summary>
            Universal interface to help in the creation of Hashtables.  Especially useful for C# users.
            </summary>
            <param name="args">
            A <see cref="T:System.Object[]" /> of alternating name value pairs.  For example "time",1,"delay",2...
            </param>
            <returns>
            A <see cref="T:System.Collections.Hashtable" /></returns>
        </member>
    </members>
</doc>
